// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TunnelQuest.Data.Models;

namespace TunnelQuest.Data.Migrations
{
    [DbContext(typeof(TunnelQuestContext))]
    [Migration("20181229221101_CreateItemTables")]
    partial class CreateItemTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TunnelQuest.Data.Models.Class", b =>
                {
                    b.Property<string>("ClassCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("class_code");

                    b.Property<string>("ClassName")
                        .HasColumnName("class_name");

                    b.HasKey("ClassCode");

                    b.ToTable("class");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.Deity", b =>
                {
                    b.Property<string>("DeityName")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deity_name");

                    b.HasKey("DeityName");

                    b.ToTable("deity");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.Effect", b =>
                {
                    b.Property<string>("EffectName")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("effect_name");

                    b.HasKey("EffectName");

                    b.ToTable("effect");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.EffectType", b =>
                {
                    b.Property<string>("EffectTypeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("effect_type_code");

                    b.HasKey("EffectTypeCode");

                    b.ToTable("effect_type");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.Item", b =>
                {
                    b.Property<string>("ItemName")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("item_name");

                    b.Property<int?>("Agility")
                        .HasColumnName("agility");

                    b.Property<int?>("ArmorClass")
                        .HasColumnName("armor_class");

                    b.Property<int?>("AttackDamage")
                        .HasColumnName("attack_damage");

                    b.Property<int?>("AttackDelay")
                        .HasColumnName("attack_delay");

                    b.Property<int?>("BrassModifier")
                        .HasColumnName("brass_modifier");

                    b.Property<int?>("Capacity")
                        .HasColumnName("capacity");

                    b.Property<string>("CapacitySizeCode")
                        .HasColumnName("capacity_size_code");

                    b.Property<int?>("Charisma")
                        .HasColumnName("charisma");

                    b.Property<int?>("ColdResist")
                        .HasColumnName("cold_resist");

                    b.Property<int?>("Dexterity")
                        .HasColumnName("dexterity");

                    b.Property<int?>("DiseaseResist")
                        .HasColumnName("disease_resist");

                    b.Property<float?>("EffectCastingTime")
                        .HasColumnName("effect_casting_time");

                    b.Property<int?>("EffectMinimumLevel")
                        .HasColumnName("effect_minimum_level");

                    b.Property<string>("EffectName")
                        .HasColumnName("effect_name");

                    b.Property<string>("EffectTypeCode")
                        .HasColumnName("effect_type_code");

                    b.Property<int?>("FireResist")
                        .HasColumnName("fire_resist");

                    b.Property<float?>("Haste")
                        .HasColumnName("haste");

                    b.Property<int?>("HitPoints")
                        .HasColumnName("hit_points");

                    b.Property<string>("IconFileName")
                        .HasColumnName("icon_file_name");

                    b.Property<int?>("Intelligence")
                        .HasColumnName("intelligence");

                    b.Property<bool>("IsArtifact")
                        .HasColumnName("is_artifact");

                    b.Property<bool>("IsExpendable")
                        .HasColumnName("is_expendable");

                    b.Property<bool>("IsLore")
                        .HasColumnName("is_lore");

                    b.Property<bool>("IsMagic")
                        .HasColumnName("is_magic");

                    b.Property<bool>("IsNoDrop")
                        .HasColumnName("is_no_drop");

                    b.Property<bool>("IsNoTrade")
                        .HasColumnName("is_no_trade");

                    b.Property<bool>("IsQuestItem")
                        .HasColumnName("is_quest_item");

                    b.Property<bool>("IsTemporary")
                        .HasColumnName("is_temporary");

                    b.Property<int?>("MagicResist")
                        .HasColumnName("magic_resist");

                    b.Property<int?>("Mana")
                        .HasColumnName("mana");
                    
                    b.Property<int?>("MaxCharges")
                        .HasColumnName("max_charges");

                    b.Property<int?>("PercussionModifier")
                        .HasColumnName("percussion_modifier");

                    b.Property<int?>("Range")
                        .HasColumnName("range");

                    b.Property<int?>("RequiredLevel")
                        .HasColumnName("required_level");

                    b.Property<int?>("ResistPoison")
                        .HasColumnName("poison_resist");

                    b.Property<int?>("SingingModifier")
                        .HasColumnName("singing_modifier");

                    b.Property<string>("SizeCode")
                        .HasColumnName("size_code");

                    b.Property<int?>("Stamina")
                        .HasColumnName("stamina");

                    b.Property<int?>("Strength")
                        .HasColumnName("strength");

                    b.Property<int?>("StringedModifier")
                        .HasColumnName("stringed_modifier");

                    b.Property<string>("WeaponSkillCode")
                        .HasColumnName("weapon_skill_code");

                    b.Property<float>("Weight")
                        .HasColumnName("weight");

                    b.Property<float?>("WeightReduction")
                        .HasColumnName("weight_reduction");

                    b.Property<int?>("WindModifier")
                        .HasColumnName("wind_modifier");

                    b.Property<int?>("Wisdom")
                        .HasColumnName("wisdom");

                    b.HasKey("ItemName");

                    b.HasIndex("CapacitySizeCode");

                    b.HasIndex("EffectName");

                    b.HasIndex("EffectTypeCode");

                    b.HasIndex("SizeCode");

                    b.HasIndex("WeaponSkillCode");

                    b.ToTable("item");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.ItemClass", b =>
                {
                    b.Property<int>("ItemClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("item_class_id");

                    b.Property<string>("ClassCode")
                        .HasColumnName("class_code");

                    b.Property<string>("ItemName")
                        .HasColumnName("item_name");

                    b.HasKey("ItemClassId");

                    b.HasIndex("ClassCode");

                    b.HasIndex("ItemName");

                    b.ToTable("item_class");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.ItemDeity", b =>
                {
                    b.Property<int>("ItemDeityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("item_deity_id");

                    b.Property<string>("DeityName")
                        .HasColumnName("deity_name");

                    b.Property<string>("ItemName")
                        .HasColumnName("item_name");

                    b.HasKey("ItemDeityId");

                    b.HasIndex("DeityName");

                    b.HasIndex("ItemName");

                    b.ToTable("item_deity");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.ItemInfoLine", b =>
                {
                    b.Property<int>("ItemInfoLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("item_info_line_id");

                    b.Property<string>("ItemName")
                        .HasColumnName("item_name");

                    b.Property<string>("Text")
                        .HasColumnName("text");

                    b.HasKey("ItemInfoLineId");

                    b.HasIndex("ItemName");

                    b.ToTable("item_info_line");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.ItemRace", b =>
                {
                    b.Property<int>("ItemRaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("item_race_id");

                    b.Property<string>("ItemName")
                        .HasColumnName("item_name");

                    b.Property<string>("RaceCode")
                        .HasColumnName("race_code");

                    b.HasKey("ItemRaceId");

                    b.HasIndex("ItemName");

                    b.HasIndex("RaceCode");

                    b.ToTable("item_race");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.ItemSlot", b =>
                {
                    b.Property<int>("ItemSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("item_slot_id");

                    b.Property<string>("ItemName")
                        .HasColumnName("item_name");

                    b.Property<string>("SlotCode")
                        .HasColumnName("slot_code");

                    b.HasKey("ItemSlotId");

                    b.HasIndex("ItemName");

                    b.HasIndex("SlotCode");

                    b.ToTable("item_slot");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.Race", b =>
                {
                    b.Property<string>("RaceCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("race_code");

                    b.Property<string>("RaceName")
                        .HasColumnName("race_name");

                    b.HasKey("RaceCode");

                    b.ToTable("race");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.Size", b =>
                {
                    b.Property<string>("SizeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("size_code");

                    b.HasKey("SizeCode");

                    b.ToTable("size");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.Slot", b =>
                {
                    b.Property<string>("SlotCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("slot_code");

                    b.HasKey("SlotCode");

                    b.ToTable("slot");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.WeaponSkill", b =>
                {
                    b.Property<string>("WeaponSkillCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weapon_skill_code");

                    b.HasKey("WeaponSkillCode");

                    b.ToTable("weapon_skill");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.Item", b =>
                {
                    b.HasOne("TunnelQuest.Data.Models.Size", "CapacitySize")
                        .WithMany()
                        .HasForeignKey("CapacitySizeCode");

                    b.HasOne("TunnelQuest.Data.Models.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectName");

                    b.HasOne("TunnelQuest.Data.Models.EffectType", "EffectType")
                        .WithMany()
                        .HasForeignKey("EffectTypeCode");

                    b.HasOne("TunnelQuest.Data.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeCode");

                    b.HasOne("TunnelQuest.Data.Models.WeaponSkill", "WeaponSkill")
                        .WithMany()
                        .HasForeignKey("WeaponSkillCode");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.ItemClass", b =>
                {
                    b.HasOne("TunnelQuest.Data.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassCode");

                    b.HasOne("TunnelQuest.Data.Models.Item", "Item")
                        .WithMany("Classes")
                        .HasForeignKey("ItemName");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.ItemDeity", b =>
                {
                    b.HasOne("TunnelQuest.Data.Models.Deity", "Deity")
                        .WithMany()
                        .HasForeignKey("DeityName");

                    b.HasOne("TunnelQuest.Data.Models.Item", "Item")
                        .WithMany("Deities")
                        .HasForeignKey("ItemName");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.ItemInfoLine", b =>
                {
                    b.HasOne("TunnelQuest.Data.Models.Item", "Item")
                        .WithMany("Info")
                        .HasForeignKey("ItemName");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.ItemRace", b =>
                {
                    b.HasOne("TunnelQuest.Data.Models.Item", "Item")
                        .WithMany("Races")
                        .HasForeignKey("ItemName");

                    b.HasOne("TunnelQuest.Data.Models.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceCode");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.ItemSlot", b =>
                {
                    b.HasOne("TunnelQuest.Data.Models.Item", "Item")
                        .WithMany("Slots")
                        .HasForeignKey("ItemName");

                    b.HasOne("TunnelQuest.Data.Models.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotCode");
                });
#pragma warning restore 612, 618
        }
    }
}
