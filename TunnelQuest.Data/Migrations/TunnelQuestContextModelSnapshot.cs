// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TunnelQuest.Data.Models;

namespace TunnelQuest.Data.Migrations
{
    [DbContext(typeof(TunnelQuestContext))]
    partial class TunnelQuestContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("TunnelQuest.Data.Models.Class", b =>
                {
                    b.Property<string>("ClassCode")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ItemName");

                    b.HasKey("ClassCode");

                    b.HasIndex("ItemName");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.Effect", b =>
                {
                    b.Property<string>("EffectName")
                        .ValueGeneratedOnAdd();

                    b.HasKey("EffectName");

                    b.ToTable("Effect");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.Item", b =>
                {
                    b.Property<string>("ItemName")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsLore");

                    b.Property<bool>("IsMagic");

                    b.Property<bool>("IsTemporary");

                    b.Property<string>("SizeName");

                    b.Property<float>("Weight");

                    b.HasKey("ItemName");

                    b.HasIndex("SizeName");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.ItemEffect", b =>
                {
                    b.Property<int>("ItemEffectId")
                        .ValueGeneratedOnAdd();

                    b.Property<float?>("CastingTime");

                    b.Property<string>("EffectName");

                    b.Property<int>("EffectType");

                    b.Property<string>("ItemName");

                    b.Property<int?>("RequiredLevel");

                    b.HasKey("ItemEffectId");

                    b.HasIndex("EffectName");

                    b.HasIndex("ItemName");

                    b.ToTable("ItemEffect");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.ItemStat", b =>
                {
                    b.Property<int>("ItemStatId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Adjustment");

                    b.Property<string>("ItemName");

                    b.Property<string>("StatCode");

                    b.HasKey("ItemStatId");

                    b.HasIndex("ItemName");

                    b.HasIndex("StatCode");

                    b.ToTable("ItemStat");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.Race", b =>
                {
                    b.Property<string>("RaceCode")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ItemName");

                    b.HasKey("RaceCode");

                    b.HasIndex("ItemName");

                    b.ToTable("Race");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.Size", b =>
                {
                    b.Property<string>("SizeName")
                        .ValueGeneratedOnAdd();

                    b.HasKey("SizeName");

                    b.ToTable("Size");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.Stat", b =>
                {
                    b.Property<string>("StatCode")
                        .ValueGeneratedOnAdd();

                    b.HasKey("StatCode");

                    b.ToTable("Stat");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.Class", b =>
                {
                    b.HasOne("TunnelQuest.Data.Models.Item")
                        .WithMany("Classes")
                        .HasForeignKey("ItemName");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.Item", b =>
                {
                    b.HasOne("TunnelQuest.Data.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeName");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.ItemEffect", b =>
                {
                    b.HasOne("TunnelQuest.Data.Models.Effect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectName");

                    b.HasOne("TunnelQuest.Data.Models.Item", "Item")
                        .WithMany("ItemEffects")
                        .HasForeignKey("ItemName");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.ItemStat", b =>
                {
                    b.HasOne("TunnelQuest.Data.Models.Item", "Item")
                        .WithMany("ItemStats")
                        .HasForeignKey("ItemName");

                    b.HasOne("TunnelQuest.Data.Models.Stat", "Stat")
                        .WithMany()
                        .HasForeignKey("StatCode");
                });

            modelBuilder.Entity("TunnelQuest.Data.Models.Race", b =>
                {
                    b.HasOne("TunnelQuest.Data.Models.Item")
                        .WithMany("Races")
                        .HasForeignKey("ItemName");
                });
#pragma warning restore 612, 618
        }
    }
}
