{"remainingRequest":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\TimeStamp.vue?vue&type=script&lang=ts&","dependencies":[{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\TimeStamp.vue","mtime":1552239053188},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\nimport Vue from \"vue\";\nimport * as moment from \"moment\";\n\nexport default Vue.extend({\n    props: {\n        cssClass: {\n            type: String,\n            required: false\n        },\n        timeString: {\n            type: String,\n            required: true\n        }\n    },\n    data: function () {\n        return {\n            text: \"\",\n\n            // \"private\"\n            timer_: -1,\n            moment_: null as moment.Moment | null\n        };\n    },\n    mounted: function () {\n        this.moment_ = moment.utc(this.timeString).local();\n        this.updateText();\n    },\n    watch: {\n        timeString: function (newValue, oldValue) {\n            this.moment_ = moment.utc(newValue).local();\n            this.updateText();\n        }\n    },\n    beforeDestroy: function () {\n        if (this.timer_ > 0)\n            clearTimeout(this.timer_);\n    },\n    methods: {\n        \n        updateText: function () {\n            let timestampMoment = (this.moment_ as moment.Moment);\n            let nowMoment = moment.default();\n            let sinceTimestamp = moment.duration(nowMoment.diff(timestampMoment));\n\n            let asMinutes = sinceTimestamp.asMinutes();\n            let asHours = sinceTimestamp.asHours();\n\n            let timerDelay = -1;\n            let newText = \"\";\n            if (asMinutes < 1) {\n                newText = Math.floor(sinceTimestamp.asSeconds()).toString() + \" seconds ago\";\n                timerDelay = 1000; // 1 second\n            }\n            else if (asMinutes < 2) {\n                newText = \"1 minute ago\";\n                timerDelay = 60000; // 1 minute\n            }\n            else if (asHours < 1) {\n                newText = sinceTimestamp.minutes().toString() + \" minutes ago\";\n                timerDelay = 60000; // 1 minute\n            }\n            else if (asHours < 2) {\n                newText = \"1 hour ago\";\n                timerDelay = 3600000; // 1 hour\n            }\n            else if (sinceTimestamp.asDays() < 1) {\n                newText = sinceTimestamp.hours().toString() + \" hours ago\";\n                timerDelay = 3600000; // 1 hour\n            }\n            else\n                newText = timestampMoment.format('YYYY-MM-DD HH:mm:ss');\n\n            this.text = newText;\n            //this.text = timestampMoment.fromNow();\n\n            if (timerDelay > 0)\n                this.timer_ = setTimeout(this.updateText, timerDelay);\n        }\n    },\n    components: {\n    }\n});\n",{"version":3,"sources":["TimeStamp.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TimeStamp.vue","sourceRoot":"src\\components","sourcesContent":["<template>\r\n    <span :class=\"cssClass\">\r\n        <span>{{text}}</span>\r\n    </span>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n    import Vue from \"vue\";\r\n    import * as moment from \"moment\";\r\n\r\n    export default Vue.extend({\r\n        props: {\r\n            cssClass: {\r\n                type: String,\r\n                required: false\r\n            },\r\n            timeString: {\r\n                type: String,\r\n                required: true\r\n            }\r\n        },\r\n        data: function () {\r\n            return {\r\n                text: \"\",\r\n\r\n                // \"private\"\r\n                timer_: -1,\r\n                moment_: null as moment.Moment | null\r\n            };\r\n        },\r\n        mounted: function () {\r\n            this.moment_ = moment.utc(this.timeString).local();\r\n            this.updateText();\r\n        },\r\n        watch: {\r\n            timeString: function (newValue, oldValue) {\r\n                this.moment_ = moment.utc(newValue).local();\r\n                this.updateText();\r\n            }\r\n        },\r\n        beforeDestroy: function () {\r\n            if (this.timer_ > 0)\r\n                clearTimeout(this.timer_);\r\n        },\r\n        methods: {\r\n            \r\n            updateText: function () {\r\n                let timestampMoment = (this.moment_ as moment.Moment);\r\n                let nowMoment = moment.default();\r\n                let sinceTimestamp = moment.duration(nowMoment.diff(timestampMoment));\r\n\r\n                let asMinutes = sinceTimestamp.asMinutes();\r\n                let asHours = sinceTimestamp.asHours();\r\n\r\n                let timerDelay = -1;\r\n                let newText = \"\";\r\n                if (asMinutes < 1) {\r\n                    newText = Math.floor(sinceTimestamp.asSeconds()).toString() + \" seconds ago\";\r\n                    timerDelay = 1000; // 1 second\r\n                }\r\n                else if (asMinutes < 2) {\r\n                    newText = \"1 minute ago\";\r\n                    timerDelay = 60000; // 1 minute\r\n                }\r\n                else if (asHours < 1) {\r\n                    newText = sinceTimestamp.minutes().toString() + \" minutes ago\";\r\n                    timerDelay = 60000; // 1 minute\r\n                }\r\n                else if (asHours < 2) {\r\n                    newText = \"1 hour ago\";\r\n                    timerDelay = 3600000; // 1 hour\r\n                }\r\n                else if (sinceTimestamp.asDays() < 1) {\r\n                    newText = sinceTimestamp.hours().toString() + \" hours ago\";\r\n                    timerDelay = 3600000; // 1 hour\r\n                }\r\n                else\r\n                    newText = timestampMoment.format('YYYY-MM-DD HH:mm:ss');\r\n\r\n                this.text = newText;\r\n                //this.text = timestampMoment.fromNow();\r\n\r\n                if (timerDelay > 0)\r\n                    this.timer_ = setTimeout(this.updateText, timerDelay);\r\n            }\r\n        },\r\n        components: {\r\n        }\r\n    });\r\n</script>\r\n\r\n<style>\r\n</style>"]}]}