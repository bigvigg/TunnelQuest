{"remainingRequest":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\ChatPage.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\ChatPage.vue","mtime":1551928320220},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n.tqChatPage {\n    background-color: rgba(0,0,0,0.7);\n}\n\n/* override .tqChatLineView */\n.tqChatLineView {\n    display: block;\n}\n\n",{"version":3,"sources":["ChatPage.vue"],"names":[],"mappings":";AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"ChatPage.vue","sourceRoot":"src\\components","sourcesContent":["<style>\r\n    .tqChatPage {\r\n        background-color: rgba(0,0,0,0.7);\r\n    }\r\n\r\n    /* override .tqChatLineView */\r\n    .tqChatLineView {\r\n        display: block;\r\n    }\r\n\r\n</style>\r\n\r\n<template>\r\n    <div>\r\n        <site-header>\r\n            <connection-status-view :connection=\"connection\"></connection-status-view>\r\n        </site-header>\r\n\r\n        <div class=\"tqChatPage\">\r\n            <transition-group :name=\"transitionName\">\r\n                <chat-line-view v-for=\"chatLine in viewLines\" :key=\"chatLine.id\" :chatLine=\"chatLine\" :showTimestamp=\"true\" :itemNameLinks=\"true\"></chat-line-view>\r\n            </transition-group>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n    import axios from \"axios\";\r\n    import mixins from 'vue-typed-mixins';\r\n    import * as _ from \"lodash\";\r\n\r\n    import ChatLine from \"../interfaces/ChatLine\";\r\n    import LinesAndAuctions from \"../interfaces/LinesAndAuctions\";\r\n\r\n    import LivePage from \"../mixins/LivePage\";\r\n\r\n    import SiteHeader from \"./SiteHeader.vue\";\r\n    import ConnectionStatusView from \"./ConnectionStatusView.vue\";\r\n    import ChatLineView from \"./ChatLineView.vue\";\r\n\r\n    import TQGlobals from \"../classes/TQGlobals\";\r\n    import SlidingList from \"../classes/SlidingList\";\r\n\r\n    export default mixins(LivePage).extend({\r\n\r\n        name: \"ChatPage\",\r\n\r\n        data: function () {\r\n            return {\r\n                // STUB hard-coded\r\n                serverCode: \"BLUE\",\r\n\r\n                chatLines: new SlidingList<ChatLine>(function (a: ChatLine, b: ChatLine) {\r\n                    // sort ascending\r\n                    if (a.id < b.id)\r\n                        return -1;\r\n                    else if (a.id > b.id)\r\n                        return 1;\r\n                    else\r\n                        return 0;\r\n                })\r\n            };\r\n        },\r\n\r\n        computed: {\r\n            viewLines: function () {\r\n                return _.clone(this.chatLines.array).reverse();\r\n            }\r\n        },\r\n\r\n        methods: {\r\n\r\n            // inherited from LivePage\r\n            getHubUrl: function () {\r\n                // STUB hard-coded\r\n                return \"/blue_chat_hub\";\r\n            },\r\n\r\n            // inherited from LivePage\r\n            onInitialized: function () {\r\n                console.log(\"stub ChatPage.onInitialized\");\r\n\r\n                this.chatLines.maxSize = TQGlobals.settings.maxChatLines;\r\n            },\r\n\r\n            // inherited from LivePage\r\n            getLatestContent: function () {\r\n                let minId: number | null = null;\r\n                if (this.chatLines.array.length > 0)\r\n                    minId = this.chatLines.array[this.chatLines.array.length - 1].id + 1;\r\n\r\n                axios.get('/api/chat_lines?serverCode=' + this.serverCode + \"&minId=\" + (minId == null ? \"\" : minId.toString()))\r\n                    .then(response => {\r\n                        let result = response.data as LinesAndAuctions;\r\n                        this.onNewContent(result, true);\r\n                    })\r\n                    .catch(err => {\r\n                        // stub\r\n                        console.log(err);\r\n                    }); // end axios.get(chat_lines)\r\n            },\r\n\r\n            // inherited from LivePage\r\n            getEarlierContent: function () {\r\n                let maxId: number | null = null;\r\n                if (this.chatLines.array.length > 0)\r\n                    maxId = this.chatLines.array[0].id - 1;\r\n\r\n                console.log(\"stub ChatPage.getEarlierContent(maxId=\" + maxId + \")\");\r\n\r\n                axios.get('/api/chat_lines?serverCode=' + this.serverCode + \"&maxId=\" + (maxId == null ? \"\" : maxId.toString()) + \"&maxResults=\" + TQGlobals.settings.maxChatLines.toString())\r\n                    .then(response => {\r\n                        let result = response.data as LinesAndAuctions;\r\n                        this.onNewContent(result, false);\r\n                    })\r\n                    .catch(err => {\r\n                        // stub\r\n                        console.log(err);\r\n                    }); // end axios.get(chat_lines)\r\n            },\r\n\r\n            // inherited from LivePage\r\n            onFilteredContent: function (newContent: LinesAndAuctions, enforceMaxSize: boolean) {\r\n                // stub\r\n                console.log(\"ChatPage.onNewContent():\");\r\n                console.log(newContent);\r\n\r\n                for (let chatLineId in newContent.lines) {\r\n                    let chatLine = newContent.lines[chatLineId];\r\n                    this.chatLines.add(chatLine);\r\n                }\r\n\r\n                if (enforceMaxSize)\r\n                    this.chatLines.enforceMaxSize();\r\n                this.chatLines.sort();\r\n            },\r\n\r\n            // inherited from LivePage\r\n            onDestroying: function () {\r\n                this.chatLines.clear();\r\n            },\r\n        },\r\n\r\n        components: {\r\n            SiteHeader,\r\n            ConnectionStatusView,\r\n            ChatLineView\r\n        },\r\n    });\r\n</script>\r\n"]}]}