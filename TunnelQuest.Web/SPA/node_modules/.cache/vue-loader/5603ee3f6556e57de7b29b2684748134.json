{"remainingRequest":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\AuctionHouseView.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\AuctionHouseView.vue","mtime":1548726331270},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n.tqAuctionHouseListDivider {\n    background-color: #55a2c6;\n    color: #ffffff;\n    font-weight: bold;\n    margin-bottom: 10px;\n    text-align: center;\n    font-size: 1.2em;\n}\n\n.tqAuctionHouseViewList > span {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: center;\n}\n\n",{"version":3,"sources":["AuctionHouseView.vue"],"names":[],"mappings":";;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AuctionHouseView.vue","sourceRoot":"src\\components","sourcesContent":["\r\n<style>\r\n    .tqAuctionHouseListDivider {\r\n        background-color: #55a2c6;\r\n        color: #ffffff;\r\n        font-weight: bold;\r\n        margin-bottom: 10px;\r\n        text-align: center;\r\n        font-size: 1.2em;\r\n    }\r\n\r\n    .tqAuctionHouseViewList > span {\r\n        width: 100%;\r\n        height: 100%;\r\n        display: flex;\r\n        flex-direction: row;\r\n        flex-wrap: wrap;\r\n        justify-content: center;\r\n    }\r\n\r\n</style>\r\n\r\n<template>\r\n    <div>\r\n        <div class=\"tqAuctionHouseListDivider\">Recent auctions:</div>\r\n        <div class=\"tqAuctionHouseViewList\">\r\n            <transition-group :name=\"transitionName\">\r\n                <auction-view v-for=\"auction in recentlyUpdatedAuctions\" :key=\"auction.id\" :auction=\"auction\"></auction-view>\r\n            </transition-group>\r\n        </div>\r\n        <div class=\"tqAuctionHouseListDivider\">Older auctions:</div>\r\n        <div class=\"tqAuctionHouseViewList\">\r\n            <transition-group :name=\"transitionName\">\r\n                <auction-view v-for=\"auction in notRecentlyUpdatedAuctions\" :key=\"auction.id\" :auction=\"auction\"></auction-view>\r\n            </transition-group>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n    import axios from \"axios\";\r\n    import mixins from 'vue-typed-mixins';\r\n    import * as _ from \"lodash\";\r\n    import * as moment from \"moment\";\r\n\r\n    import Auction from \"../interfaces/Auction\";\r\n    import LinesAndAuctions from \"../interfaces/LinesAndAuctions\";\r\n\r\n    import LiveView from \"../mixins/LiveView\";\r\n\r\n    import TQGlobals from \"../classes/TQGlobals\";\r\n    import SlidingList from \"../classes/SlidingList\";\r\n\r\n    import AuctionView from \"./AuctionView.vue\";\r\n\r\n\r\n    export default mixins(LiveView).extend({\r\n\r\n        data: function () {\r\n            return {\r\n                auctions: new SlidingList<Auction>(function (a: Auction, b: Auction) {\r\n                    // sort ascending updatedAtString\r\n                    if (a.updatedAtString < b.updatedAtString)\r\n                        return -1;\r\n                    else if (a.updatedAtString > b.updatedAtString)\r\n                        return 1;\r\n                    else {\r\n                        // sort ascending id\r\n                        if (a.id < b.id)\r\n                            return -1;\r\n                        else if (a.id > b.id)\r\n                            return 1;\r\n                        else\r\n                            return 0;\r\n                    }\r\n                })\r\n            };\r\n        },\r\n\r\n        computed: {\r\n            recentlyUpdatedAuctions: function () {\r\n                return this.auctions.array\r\n                    .filter(function (auction: Auction, index: number) {\r\n                        return moment.duration(moment.default().diff(auction.updatedAtMoment)).asMinutes() <= 15;\r\n                    })\r\n                    .sort(function (a: Auction, b: Auction) {\r\n                        // sort descending firstSeenDate\r\n                        if (a.firstSeenDate < b.firstSeenDate)\r\n                            return 1;\r\n                        else if (a.firstSeenDate > b.firstSeenDate)\r\n                            return -1;\r\n                        else {\r\n                            // sort descending id\r\n                            if (a.id < b.id)\r\n                                return 1;\r\n                            else if (a.id > b.id)\r\n                                return -1;\r\n                            else\r\n                                return 0;\r\n                        }\r\n                    });\r\n            },\r\n\r\n            notRecentlyUpdatedAuctions: function () {\r\n                return this.auctions.array\r\n                    .filter(function (auction: Auction, index: number) {\r\n                        return moment.duration(moment.default().diff(auction.updatedAtMoment)).asMinutes() > 15;\r\n                    })\r\n                    .sort(function (a: Auction, b: Auction) {\r\n                        // sort descending updatedAtString\r\n                        if (a.updatedAtString < b.updatedAtString)\r\n                            return 1;\r\n                        else if (a.updatedAtString > b.updatedAtString)\r\n                            return -1;\r\n                        else {\r\n                            // sort descending id\r\n                            if (a.id < b.id)\r\n                                return 1;\r\n                            else if (a.id > b.id)\r\n                                return -1;\r\n                            else\r\n                                return 0;\r\n                        }\r\n                    });\r\n            }\r\n        },\r\n        methods: {\r\n\r\n            // inherited from LiveView\r\n            onInitialized: function () {\r\n                console.log(\"stub AuctionHouseView.onInitialized\");\r\n\r\n                this.auctions.maxSize = TQGlobals.settings.maxAuctions;\r\n            },\r\n\r\n            // inherited from LiveView\r\n            getLatestContent: function () {\r\n                let minUpdatedAt: Date | null = null;\r\n                if (this.auctions.array.length > 0) {\r\n                    minUpdatedAt = new Date(this.auctions.array[this.auctions.array.length - 1].updatedAtString);\r\n\r\n                    // add 1 ms so we don't always get one auction that we already know about in the results\r\n                    minUpdatedAt = new Date(minUpdatedAt.getTime() + 1);\r\n                }\r\n\r\n                axios.get('/api/auctions?serverCode=' + TQGlobals.serverCode + \"&minUpdatedAt=\" + (minUpdatedAt == null ? \"\" : minUpdatedAt.toISOString()))\r\n                    .then(response => {\r\n                        let result = response.data as LinesAndAuctions;\r\n                        this.onNewContent(result, true);\r\n                    })\r\n                    .catch(err => {\r\n                        // stub\r\n                        console.log(err);\r\n                    }); // end axios.get(chat_lines)\r\n            },\r\n\r\n            // inherited from LiveView\r\n            getEarlierContent: function () {\r\n\r\n                let maxUpdatedAt: Date | null = null;\r\n                if (this.auctions.array.length > 0) {\r\n                    maxUpdatedAt = new Date(this.auctions.array[0].updatedAtString);\r\n\r\n                    // subtract 1 ms so we don't always get one auction that we already know about in the results\r\n                    maxUpdatedAt = new Date(maxUpdatedAt.getTime() - 1);\r\n                }\r\n\r\n                axios.get('/api/auctions?serverCode=' + TQGlobals.serverCode + \"&maxUpdatedAt=\" + (maxUpdatedAt == null ? \"\" : maxUpdatedAt.toISOString()) + \"&maxResults=\" + TQGlobals.settings.maxAuctions.toString())\r\n                    .then(response => {\r\n                        let result = response.data as LinesAndAuctions;\r\n                        this.onNewContent(result, false);\r\n                    })\r\n                    .catch(err => {\r\n                        // stub\r\n                        console.log(err);\r\n                    }); // end axios.get(chat_lines)\r\n            },\r\n\r\n            // inherited from LiveView\r\n            onNewContent: function (newContent: LinesAndAuctions, enforceMaxSize: boolean) {\r\n                // stub\r\n                console.log(\"AuctionHouseView.onNewContent():\");\r\n                console.log(newContent);\r\n\r\n                // manually set some properties on the auction objects\r\n\r\n                for (let auctionId in newContent.auctions) {\r\n                    let auction = newContent.auctions[auctionId];\r\n                    auction.chatLine = newContent.lines[auction.chatLineId];\r\n                    auction.updatedAtMoment = moment.utc(auction.updatedAtString).local();\r\n                    auction.item = TQGlobals.items.get(auction.itemName, false); // false to prevent it from immediately making an ajax call to fetch this one item\r\n\r\n                    // transfer the firstSeenMoment from the previously existing entry, if it exists\r\n                    let existingEntry = this.auctions.dict[auction.id];\r\n                    if (existingEntry)\r\n                        auction.firstSeenDate = existingEntry.firstSeenDate;\r\n                    else\r\n                        auction.firstSeenDate = new Date();\r\n                }\r\n\r\n                // call this after the loop to fetch all items and simultaneously (because it's far more efficient than making an ajax call for every individual item)\r\n                TQGlobals.items.fetchPendingItems();\r\n\r\n                this.auctions.add(newContent.auctions, enforceMaxSize);\r\n            },\r\n\r\n            // inherited from LiveView\r\n            onDestroying: function () {\r\n                this.auctions.clear();\r\n            }\r\n        },\r\n        components: {\r\n            AuctionView\r\n        },\r\n    });\r\n</script>\r\n"]}]}