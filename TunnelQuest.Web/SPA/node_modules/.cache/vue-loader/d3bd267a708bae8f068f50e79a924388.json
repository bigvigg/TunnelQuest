{"remainingRequest":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\ChatPage.vue?vue&type=script&lang=ts&","dependencies":[{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\ChatPage.vue","mtime":1553479702877},{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport axios from \"axios\";\nimport mixins from 'vue-typed-mixins';\nimport * as _ from \"lodash\";\n\nimport ChatLine from \"../interfaces/ChatLine\";\nimport LinesAndAuctions from \"../interfaces/LinesAndAuctions\";\n\nimport LivePage from \"../mixins/LivePage\";\n\nimport SiteHeader from \"./SiteHeader.vue\";\nimport FiltersLink from \"./FiltersLink.vue\";\nimport ConnectionStatusView from \"./ConnectionStatusView.vue\";\nimport ChatLineView from \"./ChatLineView.vue\";\n\nimport TQGlobals from \"../classes/TQGlobals\";\nimport SlidingList from \"../classes/SlidingList\";\n\nexport default mixins(LivePage).extend({\n\n    name: \"ChatPage\",\n\n    data: function () {\n        return {\n            // STUB hard-coded\n            serverCode: \"BLUE\",\n\n            chatLines: new SlidingList<ChatLine>(function (a: ChatLine, b: ChatLine) {\n                // sort ascending\n                if (a.id < b.id)\n                    return -1;\n                else if (a.id > b.id)\n                    return 1;\n                else\n                    return 0;\n            })\n        };\n    },\n\n    computed: {\n        viewLines: function () {\n            return _.clone(this.chatLines.array).reverse();\n        }\n    },\n\n    methods: {\n\n        // inherited from LivePage\n        getHubUrl: function () {\n            // STUB hard-coded\n            return \"/blue_chat_hub\";\n        },\n\n        // inherited from LivePage\n        onInitialized: function () {\n            console.log(\"stub ChatPage.onInitialized\");\n\n            this.chatLines.maxSize = TQGlobals.settings.maxChatLines;\n        },\n\n        // inherited from TqPage\n        getLatestContent: function () {\n            let minId: number | null = null;\n            if (this.chatLines.array.length > 0)\n                minId = this.chatLines.array[this.chatLines.array.length - 1].id + 1;\n\n            axios.post('/api/chat_query', {\n                serverCode: this.serverCode,\n                minimumId: minId\n            })\n            .then(response => {\n                let result = response.data as LinesAndAuctions;\n                this.onNewContent(result, true);\n            })\n            .catch(err => {\n                // stub\n                console.log(err);\n            });\n        },\n\n        // inherited from TqPage\n        getEarlierContent: function () {\n            let maxId: number | null = null;\n            if (this.chatLines.array.length > 0)\n                maxId = this.chatLines.array[0].id - 1;\n\n            axios.post('/api/chat_query', {\n                serverCode: this.serverCode,\n                maximumId: maxId\n            })\n            .then(response => {\n                let result = response.data as LinesAndAuctions;\n                this.onNewContent(result, false);\n            })\n            .catch(err => {\n                // stub\n                console.log(err);\n            });\n        },\n\n        // inherited from TqPage\n        onFilteredContent: function (newContent: LinesAndAuctions, enforceMaxSize: boolean) {\n            // stub\n            console.log(\"ChatPage.onNewContent():\");\n            console.log(newContent);\n\n            for (let chatLineId in newContent.lines) {\n                let chatLine = newContent.lines[chatLineId];\n                this.chatLines.add(chatLine);\n            }\n\n            if (enforceMaxSize)\n                this.chatLines.enforceMaxSize();\n            this.chatLines.sort();\n        },\n\n        // inherited from LivePage\n        onDestroying: function () {\n            this.chatLines.clear();\n        },\n    },\n\n    components: {\n        SiteHeader,\n        FiltersLink,\n        ConnectionStatusView,\n        ChatLineView\n    },\n});\n",{"version":3,"sources":["ChatPage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ChatPage.vue","sourceRoot":"src\\components","sourcesContent":["<style>\r\n    .tqChatPage {\r\n        background-color: rgba(0,0,0,0.7);\r\n    }\r\n\r\n    /* override .tqChatLineView */\r\n    .tqChatLineView {\r\n        display: block;\r\n    }\r\n\r\n</style>\r\n\r\n<template>\r\n    <div>\r\n        <site-header>\r\n            <connection-status-view :connection=\"connection\"></connection-status-view>\r\n            <filters-link></filters-link>\r\n        </site-header>\r\n\r\n        <div class=\"tqChatPage\">\r\n            <transition-group :name=\"transitionName\">\r\n                <chat-line-view v-for=\"chatLine in viewLines\" :key=\"chatLine.id\" :chatLine=\"chatLine\" :showTimestamp=\"true\" :itemNameLinks=\"true\"></chat-line-view>\r\n            </transition-group>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n    import axios from \"axios\";\r\n    import mixins from 'vue-typed-mixins';\r\n    import * as _ from \"lodash\";\r\n\r\n    import ChatLine from \"../interfaces/ChatLine\";\r\n    import LinesAndAuctions from \"../interfaces/LinesAndAuctions\";\r\n\r\n    import LivePage from \"../mixins/LivePage\";\r\n\r\n    import SiteHeader from \"./SiteHeader.vue\";\r\n    import FiltersLink from \"./FiltersLink.vue\";\r\n    import ConnectionStatusView from \"./ConnectionStatusView.vue\";\r\n    import ChatLineView from \"./ChatLineView.vue\";\r\n\r\n    import TQGlobals from \"../classes/TQGlobals\";\r\n    import SlidingList from \"../classes/SlidingList\";\r\n\r\n    export default mixins(LivePage).extend({\r\n\r\n        name: \"ChatPage\",\r\n\r\n        data: function () {\r\n            return {\r\n                // STUB hard-coded\r\n                serverCode: \"BLUE\",\r\n\r\n                chatLines: new SlidingList<ChatLine>(function (a: ChatLine, b: ChatLine) {\r\n                    // sort ascending\r\n                    if (a.id < b.id)\r\n                        return -1;\r\n                    else if (a.id > b.id)\r\n                        return 1;\r\n                    else\r\n                        return 0;\r\n                })\r\n            };\r\n        },\r\n\r\n        computed: {\r\n            viewLines: function () {\r\n                return _.clone(this.chatLines.array).reverse();\r\n            }\r\n        },\r\n\r\n        methods: {\r\n\r\n            // inherited from LivePage\r\n            getHubUrl: function () {\r\n                // STUB hard-coded\r\n                return \"/blue_chat_hub\";\r\n            },\r\n\r\n            // inherited from LivePage\r\n            onInitialized: function () {\r\n                console.log(\"stub ChatPage.onInitialized\");\r\n\r\n                this.chatLines.maxSize = TQGlobals.settings.maxChatLines;\r\n            },\r\n\r\n            // inherited from TqPage\r\n            getLatestContent: function () {\r\n                let minId: number | null = null;\r\n                if (this.chatLines.array.length > 0)\r\n                    minId = this.chatLines.array[this.chatLines.array.length - 1].id + 1;\r\n\r\n                axios.post('/api/chat_query', {\r\n                    serverCode: this.serverCode,\r\n                    minimumId: minId\r\n                })\r\n                .then(response => {\r\n                    let result = response.data as LinesAndAuctions;\r\n                    this.onNewContent(result, true);\r\n                })\r\n                .catch(err => {\r\n                    // stub\r\n                    console.log(err);\r\n                });\r\n            },\r\n\r\n            // inherited from TqPage\r\n            getEarlierContent: function () {\r\n                let maxId: number | null = null;\r\n                if (this.chatLines.array.length > 0)\r\n                    maxId = this.chatLines.array[0].id - 1;\r\n\r\n                axios.post('/api/chat_query', {\r\n                    serverCode: this.serverCode,\r\n                    maximumId: maxId\r\n                })\r\n                .then(response => {\r\n                    let result = response.data as LinesAndAuctions;\r\n                    this.onNewContent(result, false);\r\n                })\r\n                .catch(err => {\r\n                    // stub\r\n                    console.log(err);\r\n                });\r\n            },\r\n\r\n            // inherited from TqPage\r\n            onFilteredContent: function (newContent: LinesAndAuctions, enforceMaxSize: boolean) {\r\n                // stub\r\n                console.log(\"ChatPage.onNewContent():\");\r\n                console.log(newContent);\r\n\r\n                for (let chatLineId in newContent.lines) {\r\n                    let chatLine = newContent.lines[chatLineId];\r\n                    this.chatLines.add(chatLine);\r\n                }\r\n\r\n                if (enforceMaxSize)\r\n                    this.chatLines.enforceMaxSize();\r\n                this.chatLines.sort();\r\n            },\r\n\r\n            // inherited from LivePage\r\n            onDestroying: function () {\r\n                this.chatLines.clear();\r\n            },\r\n        },\r\n\r\n        components: {\r\n            SiteHeader,\r\n            FiltersLink,\r\n            ConnectionStatusView,\r\n            ChatLineView\r\n        },\r\n    });\r\n</script>\r\n"]}]}