{"remainingRequest":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\AuctionView.vue?vue&type=script&lang=ts&","dependencies":[{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\AuctionView.vue","mtime":1548819515055},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport Vue from \"vue\";\n\nimport Auction from \"../interfaces/Auction\";\nimport ChatLine from \"../interfaces/ChatLine\";\n\nimport IfDebug from \"./IfDebug.vue\";\nimport TimeStamp from \"./TimeStamp.vue\";\n\nimport ItemView from \"./ItemView.vue\";\nimport ChatLineView from \"./ChatLineView.vue\";\n\n\n\nexport default Vue.extend({\n\n    props: {\n        auction: {\n            type: Object as () => Auction,\n            required: true\n        },\n        chatLine: {\n            type: Object as () => ChatLine,\n            required: true\n        }\n    },\n\n    computed: {\n        headerCssClass: function () {\n            return this.auction.isBuying ? \"tqAuctionWtb\" : \"tqAuctionWts\";\n        },\n\n        formattedPrice: function () {\n            if (this.auction.price == null)\n                return null;\n            else\n                return this.formatNumber(this.auction.price, 0, \".\", \",\");\n        }\n    },\n\n    methods: {\n\n        // code lifted from this stackoverflow post: https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n        formatNumber(numberToFormat: number, decimals: number, dec_point: string, thousands_sep: string) {\n            var n = !isFinite(+numberToFormat) ? 0 : +numberToFormat,\n                prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),\n                sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,\n                dec = (typeof dec_point === 'undefined') ? '.' : dec_point,\n                toFixedFix = function (n: number, prec: number) {\n                    // Fix for IE parseFloat(0.55).toFixed(0) = 0;\n                    var k = Math.pow(10, prec);\n                    return Math.round(n * k) / k;\n                },\n                s = (prec ? toFixedFix(n, prec) : Math.round(n)).toString().split('.');\n            if (s[0].length > 3) {\n                s[0] = s[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, sep);\n            }\n            if ((s[1] || '').length < prec) {\n                s[1] = s[1] || '';\n                s[1] += new Array(prec - s[1].length + 1).join('0');\n            }\n            return s.join(dec);\n        }\n    },\n\n    components: {\n        IfDebug,\n        TimeStamp,\n        ItemView,\n        ChatLineView\n    }\n});\n",{"version":3,"sources":["AuctionView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4HA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AuctionView.vue","sourceRoot":"src\\components","sourcesContent":["\r\n<style>\r\n    .tqAuctionView {\r\n        opacity: 0.65;\r\n        background-color: #000000;\r\n        margin: 5px 5px 5px 5px;\r\n        display: inline-block;\r\n        vertical-align: top;\r\n    }\r\n\r\n    /* override some of the item css to make it look better on this page */\r\n    .tqAuctionView .tqItem {\r\n        /* unset these in .tqItem since we're setting them above (trust me it looks a lot better) */\r\n        opacity: unset;\r\n        background-color: unset;\r\n    }\r\n\r\n    .tqAuctionView > span {\r\n        display: block;\r\n    }\r\n\r\n    .tqAuctionId {\r\n        white-space: nowrap;\r\n        color: #ffdc87;\r\n    }\r\n\r\n    .tqAuctionWtb {\r\n        background-color: #007a18;\r\n        font-style: italic;\r\n    }\r\n\r\n    .tqAuctionWts {\r\n        background-color: #001977;\r\n        font-style: italic;\r\n    }\r\n\r\n    .tqAuctionPriceHeader {\r\n        margin-left: 5px;\r\n    }\r\n\r\n    .tqAuctionTimeStamp {\r\n        float: right;\r\n        font-style: italic;\r\n        text-align: right;\r\n        white-space: nowrap;\r\n        margin-right: 5px;\r\n    }\r\n\r\n    .tqAuctionChatLine {\r\n        margin-top: 8px;\r\n        font-size: 0.8em;\r\n        font-style: italic;\r\n        color: #808080;\r\n    }\r\n\r\n\r\n    @media screen and (min-width: 952px) {\r\n        /* start of desktop styles */\r\n        .tqAuctionView {\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 951px) {\r\n        /* start of large tablet styles */\r\n        .tqAuctionView {\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 767px) {\r\n        /* start of medium tablet styles */\r\n        .tqAuctionView {\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 609px) {\r\n        .tqAuctionView {\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 479px) {\r\n        /* start of phone styles */\r\n        .tqAuctionView {\r\n            width: 100%;\r\n        }\r\n    }\r\n\r\n</style>\r\n\r\n<template>\r\n    <span class=\"tqAuctionView\">\r\n        <span :class=\"headerCssClass\">\r\n            <if-debug>\r\n                <span class=\"tqAuctionId\">\r\n                    [A{{auction.id}}]\r\n                </span>\r\n            </if-debug>\r\n\r\n            <span class=\"tqAuctionPriceHeader\">\r\n                <span>\r\n                    {{ auction.chatLine.playerName }}   \r\n                </span>\r\n                <span>\r\n                    {{ auction.isBuying ? \"is buying\" : \"is selling\" }}\r\n                </span>\r\n                <span v-if=\"auction.price != null\">\r\n                    for {{ formattedPrice }}\r\n                </span>\r\n            </span>\r\n\r\n            <time-stamp :timeString=\"auction.updatedAtString\" cssClass=\"tqAuctionTimeStamp\"></time-stamp>\r\n        </span>\r\n\r\n        <item-view :item=\"auction.item\">\r\n            <template slot=\"footer\">\r\n                <span class=\"tqAuctionChatLine\">\r\n                    <chat-line-view :chatLine=\"auction.chatLine\" :auctionIdToHighlight=\"auction.id\" :showTimestamp=\"false\" :itemNameLinks=\"false\"></chat-line-view>\r\n                </span>\r\n            </template>\r\n        </item-view>\r\n        \r\n    </span>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n    import Vue from \"vue\";\r\n\r\n    import Auction from \"../interfaces/Auction\";\r\n    import ChatLine from \"../interfaces/ChatLine\";\r\n\r\n    import IfDebug from \"./IfDebug.vue\";\r\n    import TimeStamp from \"./TimeStamp.vue\";\r\n\r\n    import ItemView from \"./ItemView.vue\";\r\n    import ChatLineView from \"./ChatLineView.vue\";\r\n\r\n\r\n\r\n    export default Vue.extend({\r\n\r\n        props: {\r\n            auction: {\r\n                type: Object as () => Auction,\r\n                required: true\r\n            },\r\n            chatLine: {\r\n                type: Object as () => ChatLine,\r\n                required: true\r\n            }\r\n        },\r\n\r\n        computed: {\r\n            headerCssClass: function () {\r\n                return this.auction.isBuying ? \"tqAuctionWtb\" : \"tqAuctionWts\";\r\n            },\r\n\r\n            formattedPrice: function () {\r\n                if (this.auction.price == null)\r\n                    return null;\r\n                else\r\n                    return this.formatNumber(this.auction.price, 0, \".\", \",\");\r\n            }\r\n        },\r\n\r\n        methods: {\r\n\r\n            // code lifted from this stackoverflow post: https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\r\n            formatNumber(numberToFormat: number, decimals: number, dec_point: string, thousands_sep: string) {\r\n                var n = !isFinite(+numberToFormat) ? 0 : +numberToFormat,\r\n                    prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),\r\n                    sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,\r\n                    dec = (typeof dec_point === 'undefined') ? '.' : dec_point,\r\n                    toFixedFix = function (n: number, prec: number) {\r\n                        // Fix for IE parseFloat(0.55).toFixed(0) = 0;\r\n                        var k = Math.pow(10, prec);\r\n                        return Math.round(n * k) / k;\r\n                    },\r\n                    s = (prec ? toFixedFix(n, prec) : Math.round(n)).toString().split('.');\r\n                if (s[0].length > 3) {\r\n                    s[0] = s[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, sep);\r\n                }\r\n                if ((s[1] || '').length < prec) {\r\n                    s[1] = s[1] || '';\r\n                    s[1] += new Array(prec - s[1].length + 1).join('0');\r\n                }\r\n                return s.join(dec);\r\n            }\r\n        },\r\n\r\n        components: {\r\n            IfDebug,\r\n            TimeStamp,\r\n            ItemView,\r\n            ChatLineView\r\n        }\r\n    });\r\n</script>\r\n\r\n"]}]}