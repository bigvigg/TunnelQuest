{"remainingRequest":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\ItemView.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\ItemView.vue","mtime":1552278985671},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n.tqItem {\n    display: block;\n    background-color: rgba(0,0,0,0.7);\n    color: #e0e0e0;\n    position: relative;\n    padding: 0 5px 5px 5px;\n}\n\n.tqItemLine {\n    display: block;\n    margin-top: 3px;\n}\n\n.tqItemIcon {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n}\n\n.tqItemName {\n    margin-top: 5px;\n    font-size: 1.2em;\n    font-weight: bold;\n    white-space: nowrap;\n}\n\n.tqKnownItemName {\n    color: #e049ff;\n}\n\n.tqUnknownItemName {\n    color: #f7d8ff;\n}\n\n.tqItemStat {\n    margin-right: 7px;\n}\n\n.tqItemStat span:nth-child(1) {\n    /* make sure stat names with spaces in them are never split up across two lines (\"SV MAGIC\", \"SV FIRE\", etc) */\n    white-space: nowrap;\n}\n\n.tqItemStatValuePositive {\n    color: #ffffff;\n    font-weight: bold;\n}\n\n.tqItemStatValueNegative {\n    color: #ff0000;\n    font-weight: bold;\n}\n\n.tqItemInfo {\n    display: block;\n    color: #efef00;\n}\n\n\n@media screen and (min-width: 952px) {\n    /* start of desktop styles */\n    .tqItem {\n        width: 400px;\n        min-height: 120px;\n    }\n}\n\n@media screen and (max-width: 951px) {\n    /* start of large tablet styles */\n    .tqItem {\n        width: 350px;\n        min-height: 100px;\n    }\n}\n\n@media screen and (max-width: 767px) {\n    /* start of medium tablet styles */\n    .tqItem {\n        width: 280px;\n        min-height: 80px;\n    }\n}\n\n@media screen and (max-width: 609px) {\n    .tqItem {\n        width: 225px;\n    }\n}\n\n@media screen and (max-width: 479px) {\n    /* start of phone styles */\n    .tqItem {\n        width: 100%;\n    }\n    .tqItemIcon {\n        right: 20px;\n    }\n}\n\n",{"version":3,"sources":["ItemView.vue"],"names":[],"mappings":";;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ItemView.vue","sourceRoot":"src\\components","sourcesContent":["\r\n<style>\r\n\r\n    .tqItem {\r\n        display: block;\r\n        background-color: rgba(0,0,0,0.7);\r\n        color: #e0e0e0;\r\n        position: relative;\r\n        padding: 0 5px 5px 5px;\r\n    }\r\n\r\n    .tqItemLine {\r\n        display: block;\r\n        margin-top: 3px;\r\n    }\r\n\r\n    .tqItemIcon {\r\n        position: absolute;\r\n        top: 10px;\r\n        right: 10px;\r\n    }\r\n\r\n    .tqItemName {\r\n        margin-top: 5px;\r\n        font-size: 1.2em;\r\n        font-weight: bold;\r\n        white-space: nowrap;\r\n    }\r\n\r\n    .tqKnownItemName {\r\n        color: #e049ff;\r\n    }\r\n\r\n    .tqUnknownItemName {\r\n        color: #f7d8ff;\r\n    }\r\n\r\n    .tqItemStat {\r\n        margin-right: 7px;\r\n    }\r\n\r\n    .tqItemStat span:nth-child(1) {\r\n        /* make sure stat names with spaces in them are never split up across two lines (\"SV MAGIC\", \"SV FIRE\", etc) */\r\n        white-space: nowrap;\r\n    }\r\n\r\n    .tqItemStatValuePositive {\r\n        color: #ffffff;\r\n        font-weight: bold;\r\n    }\r\n\r\n    .tqItemStatValueNegative {\r\n        color: #ff0000;\r\n        font-weight: bold;\r\n    }\r\n\r\n    .tqItemInfo {\r\n        display: block;\r\n        color: #efef00;\r\n    }\r\n\r\n\r\n    @media screen and (min-width: 952px) {\r\n        /* start of desktop styles */\r\n        .tqItem {\r\n            width: 400px;\r\n            min-height: 120px;\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 951px) {\r\n        /* start of large tablet styles */\r\n        .tqItem {\r\n            width: 350px;\r\n            min-height: 100px;\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 767px) {\r\n        /* start of medium tablet styles */\r\n        .tqItem {\r\n            width: 280px;\r\n            min-height: 80px;\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 609px) {\r\n        .tqItem {\r\n            width: 225px;\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 479px) {\r\n        /* start of phone styles */\r\n        .tqItem {\r\n            width: 100%;\r\n        }\r\n        .tqItemIcon {\r\n            right: 20px;\r\n        }\r\n    }\r\n\r\n</style>\r\n\r\n<template>\r\n    <span class=\"tqItem\">\r\n\r\n        <span :class=\"'tqItemLine tqItemName ' + (item.isFetched ? 'tqKnownItemName' : 'tqUnknownItemName')\">\r\n            {{ item.itemName }}\r\n        </span>\r\n\r\n        <span v-if=\"item.effectSpell != null && item.effectTypeCode == 'LearnSpell'\">\r\n            <spell-view :spell=\"item.effectSpell\" :showSpellName=\"false\"></spell-view>\r\n        </span>\r\n        <span v-else>\r\n            <img v-if=\"item.iconFileName != null\" :src=\"iconUrl\" class=\"tqItemIcon\" />\r\n\r\n            <span class=\"tqItemLine\">\r\n                <span v-for=\"(flag, index) in flags\" class=\"tqItemStat\">\r\n                    {{flag}}\r\n                </span>\r\n            </span>\r\n\r\n            <span v-if=\"item.slots && item.slots.length > 0\" class=\"tqItemLine\">\r\n                <span>Slots: </span>\r\n                <span v-for=\"(slotCode, index) in item.slots\" class=\"tqItemStat\">\r\n                    {{slotCode}}\r\n                </span>\r\n            </span>\r\n\r\n            <span v-if=\"item.maxCharges != null\" class=\"tqItemLine\">\r\n                <span v-if=\"item.isExpendable\">\r\n                    <span class=\"tqItemStat\">EXPENDABLE</span>\r\n                </span>\r\n                <span class=\"tqItemStat\">\r\n                    <span>Charges: </span>\r\n                    <span class=\"tqItemStatValuePositive\">{{item.maxCharges}}</span>\r\n                </span>\r\n            </span>\r\n\r\n            <span v-if=\"item.weaponSkillCode != null\" class=\"tqItemLine\">\r\n                <span class=\"tqItemStat\">\r\n                    <span>Skill: </span>\r\n                    <span class=\"tqItemStatValuePositive\">{{item.weaponSkillCode}}</span>\r\n                </span>\r\n                <span class=\"tqItemStat\">\r\n                    <span>Attack Delay: </span>\r\n                    <span class=\"tqItemStatValuePositive\">{{item.attackDelay}}</span>\r\n                </span>\r\n            </span>\r\n\r\n            <span v-if=\"item.attackDamage != null\" class=\"tqItemLine\">\r\n                <span class=\"tqItemStat\">\r\n                    <span>Damage: </span>\r\n                    <span class=\"tqItemStatValuePositive\">{{item.attackDamage}}</span>\r\n                </span>\r\n            </span>\r\n\r\n            <span v-if=\"item.armorClass != null\" class=\"tqItemLine\">\r\n                <span class=\"tqItemStat\">\r\n                    <span>AC: </span>\r\n                    <span :class=\"getStatValueCssClass(item.armorClass)\">{{item.armorClass}}</span>\r\n                </span>\r\n            </span>\r\n\r\n            <span class=\"tqItemLine\">\r\n                <span v-for=\"(stat, index) in stats\" class=\"tqItemStat\">\r\n                    <span>{{stat.code}}:&nbsp;</span><span :class=\"getStatValueCssClass(stat.value)\">{{stat.value}} </span>\r\n                </span>\r\n            </span>\r\n\r\n            <span v-if=\"item.singingModifier != null\" class=\"tqItemLine\">\r\n                <span>Singing Instrument: </span>\r\n                <span :class=\"getStatValueCssClass(item.singingModifier)\">{{ item.singingModifier }}</span>\r\n            </span>\r\n            <span v-if=\"item.percussionModifier != null\" class=\"tqItemLine\">\r\n                <span>Percussion Instrument: </span>\r\n                <span :class=\"getStatValueCssClass(item.percussionModifier)\">{{ item.percussionModifier }}</span>\r\n            </span>\r\n            <span v-if=\"item.stringedModifier != null\" class=\"tqItemLine\">\r\n                <span>Stringed Instrument: </span>\r\n                <span :class=\"getStatValueCssClass(item.stringedModifier)\">{{ item.stringedModifier }}</span>\r\n            </span>\r\n            <span v-if=\"item.brassModifier != null\" class=\"tqItemLine\">\r\n                <span>Brass Instrument: </span>\r\n                <span :class=\"getStatValueCssClass(item.brassModifier)\">{{ item.brassModifier }}</span>\r\n            </span>\r\n            <span v-if=\"item.windModifier != null\" class=\"tqItemLine\">\r\n                <span>Wind Instrument: </span>\r\n                <span :class=\"getStatValueCssClass(item.windModifier)\">{{ item.windModifier }}</span>\r\n            </span>\r\n\r\n            <span v-if=\"item.requiredLevel != null\" class=\"tqItemLine\">\r\n                <span>Required level of </span>\r\n                <span class=\"tqItemStatValuePositive\">{{ item.requiredLevel }}</span>\r\n            </span>\r\n\r\n            <span v-if=\"item.effectSpellName != null\" class=\"tqItemLine\">\r\n                <span>Effect: </span>\r\n                <span class=\"tqItemStatValuePositive\">{{item.effectSpellName}}</span>\r\n                <span v-if=\"effectTypeDesc != null\">\r\n                    <!-- the next line is a nightmare but don't break it up into multiple lines; otherwise spaces will appear in ugly spots in the rendered UI -->\r\n                    <span> ({{effectTypeDesc}}</span><span v-if=\"item.effectCastingTime != null && item.effectTypeCode != 'Combat'\"><span>, Casting Time: </span><span class=\"tqItemStatValuePositive\">{{castingTimeString}}</span></span><span>)</span>\r\n                    <span v-if=\"item.effectMinimumLevel != null\">\r\n                        <span> at Level </span>\r\n                        <span :class=\"getStatValueCssClass(item.effectMinimumLevel)\">{{item.effectMinimumLevel}}</span>\r\n                    </span>\r\n                </span>\r\n            </span>\r\n\r\n            <span v-if=\"item.haste != null\" class=\"tqItemLine\">\r\n                <span>Haste: </span>\r\n                <span :class=\"getStatValueCssClass(item.haste)\">{{ item.haste * 100 }}%</span>\r\n            </span>\r\n\r\n            <span class=\"tqItemLine\">\r\n                <span class=\"tqItemStat\">\r\n                    <span>Weight: </span>\r\n                    <span>{{ item.weight.toFixed(1) }}</span>\r\n                </span>\r\n                <span v-if=\"item.range != null\" class=\"tqItemStat\">\r\n                    <span>Range: </span>\r\n                    <span class=\"tqItemStatValuePositive\">{{ item.range }}</span>\r\n                </span>\r\n                <span v-if=\"item.sizeCode != null\" class=\"tqItemStat\">\r\n                    <span>Size: </span>\r\n                    <span>{{ item.sizeCode }}</span>\r\n                </span>\r\n                <span v-if=\"item.weightReduction != null\" class=\"tqItemStat\">\r\n                    <span>Weight Reduction: </span>\r\n                    <span :class=\"getStatValueCssClass(item.weightReduction)\">{{ item.weightReduction * 100 }}%</span>\r\n                </span>\r\n            </span>\r\n\r\n            <span v-if=\"item.capacity != null\" class=\"tqItemLine\">\r\n                <span class=\"tqItemStat\">\r\n                    <span>Capacity: </span>\r\n                    <span class=\"tqItemStatValuePositive\">{{ item.capacity }}</span>\r\n                </span>\r\n                <span class=\"tqItemStat\">\r\n                    <span>Size Capacity: </span>\r\n                    <span class=\"tqItemStatValuePositive\">{{ item.capacitySizeCode }}</span>\r\n                </span>\r\n            </span>\r\n\r\n            <span v-if=\"item.classes && item.classes.length > 0\" class=\"tqItemLine\">\r\n                Classes: {{ buildClassesString() }}\r\n            </span>\r\n\r\n            <span v-if=\"item.races && item.races.length > 0\" class=\"tqItemLine\">\r\n                Races: {{ buildRacesString() }}\r\n            </span>\r\n\r\n            <span v-if=\"item.deities && item.deities.length > 0\" class=\"tqItemLine\">\r\n                Deities: {{ buildDeitiesString() }}\r\n            </span>\r\n\r\n            <span v-if=\"item.info && item.info.length > 0\" class=\"tqItemLine\">\r\n                <span v-for=\"(info, index) in item.info\" class=\"tqItemInfo\">{{info}}</span>\r\n            </span>\r\n        </span>\r\n\r\n        <span class=\"tqItemLine\">\r\n            <slot name=\"footer\"></slot>\r\n        </span>\r\n    </span>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n    import Vue from \"vue\";\r\n\r\n    import Item from \"../interfaces/Item\";\r\n\r\n    import TQGlobals from '../classes/TQGlobals';\r\n\r\n    import SpellView from \"./SpellView.vue\";\r\n\r\n    export default Vue.extend({\r\n\r\n        props: {\r\n            item: {\r\n                type: Object as () => Item,\r\n                required: true\r\n            }\r\n        },\r\n\r\n        computed: {\r\n            iconUrl: function () {\r\n                return \"/game_assets/\" + this.item.iconFileName;\r\n            },\r\n\r\n            effectTypeDesc: function () {\r\n                switch (this.item.effectTypeCode) {\r\n                    case \"ClickAnySlot\":\r\n                        return \"Click any slot\"\r\n                    case \"ClickEquipped\":\r\n                        return \"Click equipped\"\r\n                    case \"Combat\":\r\n                        return \"Combat\";\r\n                    case \"LearnSpell\":\r\n                        return \"Learn spell\";\r\n                    case \"Worn\":\r\n                        return \"Worn\";\r\n                    default:\r\n                        return this.item.effectTypeCode;\r\n                }\r\n            },\r\n\r\n            castingTimeString: function () {\r\n                if (this.item.effectCastingTime == null)\r\n                    return \"\";\r\n                else if (this.item.effectCastingTime == 0)\r\n                    return \"Instant\";\r\n                else\r\n                    return this.item.effectCastingTime.toFixed(1).toString() + \"s\";\r\n            },\r\n\r\n            flags: function () {\r\n                let flags = new Array<string>();\r\n\r\n                if (this.item.isMagic)\r\n                    flags.push(\"MAGIC\");\r\n                if (this.item.isLore)\r\n                    flags.push(\"LORE\");\r\n                if (this.item.isNoDrop)\r\n                    flags.push(\"NO-DROP\");\r\n                if (this.item.isNoTrade)\r\n                    flags.push(\"NO-TRADE\");\r\n                if (this.item.isTemporary)\r\n                    flags.push(\"TEMPORARY\");\r\n                if (this.item.isQuestItem)\r\n                    flags.push(\"QUEST ITEM\");\r\n                if (this.item.isArtifact)\r\n                    flags.push(\"ARTIFACT\");\r\n\r\n                return flags;\r\n            },\r\n\r\n            stats: function () {\r\n                let stats = new Array();\r\n\r\n                if (this.item.strength != null)\r\n                    stats.push({ code: \"STR\", value: this.formatStatValue(this.item.strength) });\r\n                if (this.item.stamina != null)\r\n                    stats.push({ code: \"STA\", value: this.formatStatValue(this.item.stamina) });\r\n                if (this.item.agility != null)\r\n                    stats.push({ code: \"AGI\", value: this.formatStatValue(this.item.agility) });\r\n                if (this.item.dexterity != null)\r\n                    stats.push({ code: \"DEX\", value: this.formatStatValue(this.item.dexterity) });\r\n                if (this.item.wisdom != null)\r\n                    stats.push({ code: \"WIS\", value: this.formatStatValue(this.item.wisdom) });\r\n                if (this.item.intelligence != null)\r\n                    stats.push({ code: \"INT\", value: this.formatStatValue(this.item.intelligence) });\r\n                if (this.item.charisma != null)\r\n                    stats.push({ code: \"CHA\", value: this.formatStatValue(this.item.charisma) });\r\n                if (this.item.hitPoints != null)\r\n                    stats.push({ code: \"HP\", value: this.formatStatValue(this.item.hitPoints) });\r\n                if (this.item.mana != null)\r\n                    stats.push({ code: \"MANA\", value: this.formatStatValue(this.item.mana) });\r\n                if (this.item.magicResist != null)\r\n                    stats.push({ code: \"SV MAGIC\", value: this.formatStatValue(this.item.magicResist) });\r\n                if (this.item.poisonResist != null)\r\n                    stats.push({ code: \"SV POISON\", value: this.formatStatValue(this.item.poisonResist) });\r\n                if (this.item.diseaseResist != null)\r\n                    stats.push({ code: \"SV DISEASE\", value: this.formatStatValue(this.item.diseaseResist) });\r\n                if (this.item.fireResist != null)\r\n                    stats.push({ code: \"SV FIRE\", value: this.formatStatValue(this.item.fireResist) });\r\n                if (this.item.coldResist != null)\r\n                    stats.push({ code: \"SV COLD\", value: this.formatStatValue(this.item.coldResist) });\r\n\r\n                return stats;\r\n            }\r\n        },\r\n\r\n        methods: {\r\n            formatStatValue(statValue: number) {\r\n                if (statValue < 0)\r\n                    return statValue.toString();\r\n                else\r\n                    return \"+\" + statValue.toString();\r\n            },\r\n\r\n            getStatValueCssClass(statValue: number) {\r\n                if (statValue < 0)\r\n                    return \"tqItemStatValueNegative\";\r\n                else\r\n                    return \"tqItemStatValuePositive\";\r\n            },\r\n\r\n            buildClassesString() {\r\n                return this.buildCommaDelimitedList(TQGlobals.settings.classes, this.item.classes);\r\n            },\r\n\r\n            buildRacesString() {\r\n                return this.buildCommaDelimitedList(TQGlobals.settings.races, this.item.races);\r\n            },\r\n\r\n            buildDeitiesString() {\r\n                return this.buildCommaDelimitedList(null, this.item.deities);\r\n            },\r\n\r\n            buildCommaDelimitedList(allValues: { [code: string]: string } | null, itemValues: Array<string>) {\r\n                if (itemValues.length == 1 && itemValues[0] == \"ALL\")\r\n                    return \"All\";\r\n                else {\r\n                    let str = \"\";\r\n                    for (let i = 0; i < itemValues.length; i++) {\r\n                        if (i > 0)\r\n                            str += \", \";\r\n\r\n                        if (allValues == null)\r\n                            str += itemValues[i];\r\n                        else\r\n                            str += allValues[itemValues[i]];\r\n                    }\r\n                    return str;\r\n                }\r\n            }\r\n        },\r\n\r\n        components: {\r\n            SpellView\r\n        }\r\n    });\r\n</script>\r\n\r\n"]}]}