{"remainingRequest":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js??ref--12-2!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\TimeStamp.vue?vue&type=script&lang=ts&","dependencies":[{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\TimeStamp.vue","mtime":1548524614729},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Vue from \"vue\";\r\nimport * as moment from \"moment\";\r\nexport default Vue.extend({\r\n    props: {\r\n        cssClass: {\r\n            type: String,\r\n            required: false\r\n        },\r\n        timeString: {\r\n            type: String,\r\n            required: true\r\n        }\r\n    },\r\n    data: function () {\r\n        return {\r\n            text: \"\",\r\n            // \"private\"\r\n            timer_: -1,\r\n            moment_: null\r\n        };\r\n    },\r\n    mounted: function () {\r\n        this.moment_ = moment.utc(this.timeString).local();\r\n        this.updateText();\r\n    },\r\n    watch: {\r\n        timeString: function (newValue, oldValue) {\r\n            this.moment_ = moment.utc(newValue).local();\r\n            this.updateText();\r\n        }\r\n    },\r\n    beforeDestroy: function () {\r\n        if (this.timer_ > 0)\r\n            clearTimeout(this.timer_);\r\n    },\r\n    methods: {\r\n        updateText: function () {\r\n            var timestampMoment = this.moment_;\r\n            var nowMoment = moment.default();\r\n            var sinceTimestamp = moment.duration(nowMoment.diff(timestampMoment));\r\n            var asMinutes = sinceTimestamp.asMinutes();\r\n            var asHours = sinceTimestamp.asHours();\r\n            var timerDelay = -1;\r\n            var newText = \"\";\r\n            if (asMinutes < 1) {\r\n                newText = Math.floor(sinceTimestamp.asSeconds()).toString() + \" seconds ago\";\r\n                timerDelay = 1000; // 1 second\r\n            }\r\n            else if (asMinutes < 2) {\r\n                newText = \"1 minute ago\";\r\n                timerDelay = 60000; // 1 minute\r\n            }\r\n            else if (asHours < 1) {\r\n                newText = sinceTimestamp.minutes().toString() + \" minutes ago\";\r\n                timerDelay = 60000; // 1 minute\r\n            }\r\n            else if (asHours < 2) {\r\n                newText = \"1 hour ago\";\r\n                timerDelay = 3600000; // 1 hour\r\n            }\r\n            else if (sinceTimestamp.asDays() < 1) {\r\n                newText = sinceTimestamp.hours().toString() + \" hours ago\";\r\n                timerDelay = 3600000; // 1 hour\r\n            }\r\n            else\r\n                newText = timestampMoment.format('YYYY-MM-DD HH:mm:ss');\r\n            this.text = newText;\r\n            //this.text = timestampMoment.fromNow();\r\n            if (timerDelay > 0)\r\n                this.timer_ = setTimeout(this.updateText, timerDelay);\r\n        }\r\n    },\r\n    components: {}\r\n});\r\n",{"version":3,"file":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\TimeStamp.vue.ts","sourceRoot":"","sources":["C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\TimeStamp.vue?vue&type=script&lang=ts&"],"names":[],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\nimport Vue from \"vue\";\nimport * as moment from \"moment\";\n\nexport default Vue.extend({\n    props: {\n        cssClass: {\n            type: String,\n            required: false\n        },\n        timeString: {\n            type: String,\n            required: true\n        }\n    },\n    data: function () {\n        return {\n            text: \"\",\n\n            // \"private\"\n            timer_: -1,\n            moment_: null as moment.Moment | null\n        };\n    },\n    mounted: function () {\n        this.moment_ = moment.utc(this.timeString).local();\n        this.updateText();\n    },\n    watch: {\n        timeString: function (newValue, oldValue) {\n            this.moment_ = moment.utc(newValue).local();\n            this.updateText();\n        }\n    },\n    beforeDestroy: function () {\n        if (this.timer_ > 0)\n            clearTimeout(this.timer_);\n    },\n    methods: {\n        \n        updateText: function () {\n            let timestampMoment = (this.moment_ as moment.Moment);\n            let nowMoment = moment.default();\n            let sinceTimestamp = moment.duration(nowMoment.diff(timestampMoment));\n\n            let asMinutes = sinceTimestamp.asMinutes();\n            let asHours = sinceTimestamp.asHours();\n\n            let timerDelay = -1;\n            let newText = \"\";\n            if (asMinutes < 1) {\n                newText = Math.floor(sinceTimestamp.asSeconds()).toString() + \" seconds ago\";\n                timerDelay = 1000; // 1 second\n            }\n            else if (asMinutes < 2) {\n                newText = \"1 minute ago\";\n                timerDelay = 60000; // 1 minute\n            }\n            else if (asHours < 1) {\n                newText = sinceTimestamp.minutes().toString() + \" minutes ago\";\n                timerDelay = 60000; // 1 minute\n            }\n            else if (asHours < 2) {\n                newText = \"1 hour ago\";\n                timerDelay = 3600000; // 1 hour\n            }\n            else if (sinceTimestamp.asDays() < 1) {\n                newText = sinceTimestamp.hours().toString() + \" hours ago\";\n                timerDelay = 3600000; // 1 hour\n            }\n            else\n                newText = timestampMoment.format('YYYY-MM-DD HH:mm:ss');\n\n            this.text = newText;\n            //this.text = timestampMoment.fromNow();\n\n            if (timerDelay > 0)\n                this.timer_ = setTimeout(this.updateText, timerDelay);\n        }\n    },\n    components: {\n    }\n});\n"]}]}