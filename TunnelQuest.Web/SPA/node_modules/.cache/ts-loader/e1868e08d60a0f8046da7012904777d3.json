{"remainingRequest":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\thread-loader\\dist\\cjs.js!c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js??ref--12-2!c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\ChatLineView.vue?vue&type=script&lang=ts&","dependencies":[{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\ChatLineView.vue","mtime":1553130341162},{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import Vue from \"vue\";\r\nimport TQGlobals from \"../classes/TQGlobals\";\r\nimport IfDebug from \"./IfDebug.vue\";\r\nimport TimeStamp from \"./TimeStamp.vue\";\r\nimport PriceDeviationView from \"./PriceDeviationView.vue\";\r\nexport default Vue.extend({\r\n    props: {\r\n        chatLine: {\r\n            type: Object,\r\n            required: true\r\n        },\r\n        showTimestamp: {\r\n            type: Boolean,\r\n            required: true\r\n        },\r\n        itemNameLinks: {\r\n            type: Boolean,\r\n            required: true\r\n        },\r\n        itemNameToHighlight: {\r\n            type: String,\r\n            required: false\r\n        },\r\n        cssClass: {\r\n            type: String,\r\n            required: false\r\n        }\r\n    },\r\n    watch: {\r\n        chatLine: function (newValue, oldValue) {\r\n            this.rebuildText();\r\n        }\r\n    },\r\n    mounted: function () {\r\n        this.rebuildText();\r\n    },\r\n    methods: {\r\n        rebuildText: function () {\r\n            var textSpan = this.$el.querySelector(\".tqChatLineView_PlayerText\");\r\n            // remove whatever text we built in there last time\r\n            while (textSpan.lastChild) {\r\n                textSpan.removeChild(textSpan.lastChild);\r\n            }\r\n            textSpan.appendChild(document.createTextNode(\"'\"));\r\n            var indexedItemNames = new Array(); // used when adding PriceDeviationComponents\r\n            var unparsedText = this.chatLine.text;\r\n            var textSoFar = \"\";\r\n            var nextTokenIndex = 0;\r\n            var _loop_1 = function () {\r\n                if (unparsedText.substring(0, TQGlobals.settings.chatToken.length) === TQGlobals.settings.chatToken) {\r\n                    // the next word is a special data token\r\n                    // create a text span for the player-typed words we've found up to this point in the loop\r\n                    var playerTextSpan = document.createElement(\"span\");\r\n                    playerTextSpan.innerHTML = this_1.htmlEncode(textSoFar);\r\n                    textSpan.appendChild(playerTextSpan);\r\n                    textSoFar = \"\"; // reset textSoFar for the next iteration after the token\r\n                    var token = this_1.chatLine.tokens[nextTokenIndex];\r\n                    nextTokenIndex++;\r\n                    if (token.type == \"ITEM\") {\r\n                        // item name token\r\n                        var isKnownItem = (token.properties[\"isKnown\"] == \"1\");\r\n                        var itemName = token.properties[\"itemName\"];\r\n                        var text = token.properties[\"text\"];\r\n                        var aliasedItemName = TQGlobals.resolveItemAlias(itemName);\r\n                        var urlEncodedAliasedItemName_1 = encodeURIComponent(aliasedItemName);\r\n                        indexedItemNames.push(itemName);\r\n                        if (this_1.itemNameLinks) {\r\n                            // make the item name a clickable link\r\n                            var linkElem = document.createElement(\"a\");\r\n                            linkElem.classList.add(isKnownItem ? \"tqKnownItemLink\" : \"tqUnknownItemLink\");\r\n                            if (this_1.itemNameToHighlight == itemName)\r\n                                linkElem.classList.add(\"tqHighlightedItemLink\");\r\n                            linkElem.href = \"/item/\" + urlEncodedAliasedItemName_1;\r\n                            var thisComponent_1 = this_1;\r\n                            linkElem.addEventListener(\"click\", function (e) {\r\n                                e.preventDefault();\r\n                                thisComponent_1.$router.push(\"/item/\" + urlEncodedAliasedItemName_1);\r\n                            });\r\n                            linkElem.text = text;\r\n                            textSpan.appendChild(linkElem);\r\n                        }\r\n                        else if (this_1.itemNameToHighlight == itemName) {\r\n                            // highlight the item name without making it a clickable link\r\n                            var spanElem = document.createElement(\"span\");\r\n                            spanElem.classList.add(isKnownItem ? \"tqKnownItemLink\" : \"tqUnknownItemLink\");\r\n                            spanElem.innerHTML = this_1.htmlEncode(text);\r\n                            textSpan.appendChild(spanElem);\r\n                        }\r\n                        else {\r\n                            textSoFar += text;\r\n                        }\r\n                    }\r\n                    else if (token.type == \"PRICE\") {\r\n                        // price token\r\n                        // stub\r\n                        if (!token.properties[\"items\"]) {\r\n                            console.log(\"STUB!!!\");\r\n                            console.log(this_1.chatLine);\r\n                        }\r\n                        var isBuying = (token.properties[\"isBuying\"] == \"1\");\r\n                        var price = parseInt(token.properties[\"price\"]);\r\n                        var itemIndexes = token.properties[\"items\"].split(',');\r\n                        var playerTypedPriceText = token.properties[\"text\"];\r\n                        // render the text that the player actually typed in chat\r\n                        var priceElem = document.createElement(\"span\");\r\n                        priceElem.innerHTML = this_1.htmlEncode(playerTypedPriceText);\r\n                        textSpan.appendChild(priceElem);\r\n                        // now create a PriceDeviationView for each item associated with this price\r\n                        for (var _i = 0, itemIndexes_1 = itemIndexes; _i < itemIndexes_1.length; _i++) {\r\n                            var itemNameIndexString = itemIndexes_1[_i];\r\n                            var itemName = indexedItemNames[parseInt(itemNameIndexString)];\r\n                            var priceDeviationElem = document.createElement(\"span\");\r\n                            textSpan.appendChild(priceDeviationElem);\r\n                            var priceDeviationView = new PriceDeviationView({\r\n                                propsData: {\r\n                                    itemName: TQGlobals.resolveItemAlias(itemName),\r\n                                    price: price,\r\n                                    isBuying: isBuying\r\n                                }\r\n                            });\r\n                            priceDeviationView.$mount(priceDeviationElem);\r\n                        }\r\n                    }\r\n                    else {\r\n                        // unrecognized token\r\n                        throw new Error(\"Unrecognized chat token type: \" + token.type);\r\n                    }\r\n                    // update unparsedText\r\n                    var nextIndex = TQGlobals.settings.chatToken.length;\r\n                    if (nextIndex < unparsedText.length)\r\n                        unparsedText = unparsedText.substring(nextIndex);\r\n                    else\r\n                        unparsedText = \"\";\r\n                }\r\n                else {\r\n                    textSoFar += unparsedText[0];\r\n                    // updated unparsedText\r\n                    unparsedText = unparsedText.substring(1);\r\n                }\r\n            };\r\n            var this_1 = this;\r\n            while (unparsedText.length > 0) {\r\n                _loop_1();\r\n            }\r\n            if (textSoFar != \"\") {\r\n                var playerTextSpan = document.createElement(\"span\");\r\n                playerTextSpan.innerHTML = this.htmlEncode(textSoFar);\r\n                textSpan.appendChild(playerTextSpan);\r\n            }\r\n            textSpan.appendChild(document.createTextNode(\"'\"));\r\n        },\r\n        htmlEncode: function (str) {\r\n            return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/ /g, '&nbsp;');\r\n        }\r\n    },\r\n    components: {\r\n        IfDebug: IfDebug,\r\n        TimeStamp: TimeStamp\r\n    }\r\n});\r\n",{"version":3,"file":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\ChatLineView.vue.ts","sourceRoot":"","sources":["c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\ChatLineView.vue?vue&type=script&lang=ts&"],"names":[],"mappings":"AAgFA,OAAO,GAAG,MAAM,KAAK,CAAC;AAItB,OAAO,SAAS,MAAM,sBAAsB,CAAC;AAE7C,OAAO,OAAO,MAAM,eAAe,CAAC;AACpC,OAAO,SAAS,MAAM,iBAAiB,CAAC;AACxC,OAAO,kBAAkB,MAAM,0BAA0B,CAAC;AAE1D,eAAe,GAAG,CAAC,MAAM,CAAC;IACtB,KAAK,EAAE;QACH,QAAQ,EAAE;YACN,IAAI,EAAE,MAAwB;YAC9B,QAAQ,EAAE,IAAI;SACjB;QACD,aAAa,EAAE;YACX,IAAI,EAAE,OAAO;YACb,QAAQ,EAAE,IAAI;SACjB;QACD,aAAa,EAAE;YACX,IAAI,EAAE,OAAO;YACb,QAAQ,EAAE,IAAI;SACjB;QACD,mBAAmB,EAAE;YACjB,IAAI,EAAE,MAAM;YACZ,QAAQ,EAAE,KAAK;SAClB;QACD,QAAQ,EAAE;YACN,IAAI,EAAE,MAAM;YACZ,QAAQ,EAAE,KAAK;SAClB;KACJ;IACD,KAAK,EAAE;QACH,QAAQ,EAAE,UAAU,QAAQ,EAAE,QAAQ;YAClC,IAAI,CAAC,WAAW,EAAE,CAAC;QACvB,CAAC;KACJ;IACD,OAAO,EAAE;QACL,IAAI,CAAC,WAAW,EAAE,CAAC;IACvB,CAAC;IACD,OAAO,EAAE;QAEL,WAAW,EAAE;YACT,IAAI,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,4BAA4B,CAAoB,CAAC;YAEvF,mDAAmD;YACnD,OAAO,QAAQ,CAAC,SAAS,EAAE;gBACvB,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;aAC5C;YAED,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;YAEnD,IAAI,gBAAgB,GAAG,IAAI,KAAK,EAAU,CAAC,CAAC,4CAA4C;YACxF,IAAI,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;YACtC,IAAI,SAAS,GAAG,EAAE,CAAA;YAClB,IAAI,cAAc,GAAG,CAAC,CAAC;;gBAGnB,IAAI,YAAY,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE;oBACjG,wCAAwC;oBAExC,yFAAyF;oBACzF,IAAI,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAoB,CAAC;oBACvE,cAAc,CAAC,SAAS,GAAG,OAAK,UAAU,CAAC,SAAS,CAAC,CAAC;oBACtD,QAAQ,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;oBACrC,SAAS,GAAG,EAAE,CAAC,CAAC,yDAAyD;oBAEzE,IAAI,KAAK,GAAG,OAAK,QAAQ,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;oBACjD,cAAc,EAAE,CAAC;oBAEjB,IAAI,KAAK,CAAC,IAAI,IAAI,MAAM,EAAE;wBACtB,kBAAkB;wBAElB,IAAI,WAAW,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,CAAC;wBACvD,IAAI,QAAQ,GAAG,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;wBAC5C,IAAI,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;wBACpC,IAAI,eAAe,GAAG,SAAS,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;wBAC3D,IAAI,2BAAyB,GAAG,kBAAkB,CAAC,eAAe,CAAC,CAAC;wBAEpE,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;wBAEhC,IAAI,OAAK,aAAa,EAAE;4BACpB,sCAAsC;4BACtC,IAAI,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAsB,CAAC;4BAEhE,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC;4BAC9E,IAAI,OAAK,mBAAmB,IAAI,QAAQ;gCACpC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;4BAEpD,QAAQ,CAAC,IAAI,GAAG,QAAQ,GAAG,2BAAyB,CAAC;4BACrD,IAAI,eAAa,SAAO,CAAC;4BACzB,QAAQ,CAAC,gBAAgB,CAAC,OAAO,EAAE,UAAU,CAAC;gCAC1C,CAAC,CAAC,cAAc,EAAE,CAAC;gCACnB,eAAa,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,GAAG,2BAAyB,CAAC,CAAC;4BACrE,CAAC,CAAC,CAAC;4BACH,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;4BACrB,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;yBAClC;6BACI,IAAI,OAAK,mBAAmB,IAAI,QAAQ,EAAE;4BAC3C,6DAA6D;4BAC7D,IAAI,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAoB,CAAC;4BACjE,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC;4BAC9E,QAAQ,CAAC,SAAS,GAAG,OAAK,UAAU,CAAC,IAAI,CAAC,CAAC;4BAC3C,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;yBAClC;6BACI;4BACD,SAAS,IAAI,IAAI,CAAC;yBACrB;qBAEJ;yBACI,IAAI,KAAK,CAAC,IAAI,IAAI,OAAO,EAAE;wBAC5B,cAAc;wBAEd,OAAO;wBACP,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;4BAC5B,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;4BACvB,OAAO,CAAC,GAAG,CAAC,OAAK,QAAQ,CAAC,CAAC;yBAC9B;wBAED,IAAI,QAAQ,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,CAAC;wBACrD,IAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;wBAChD,IAAI,WAAW,GAAG,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBACvD,IAAI,oBAAoB,GAAG,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;wBAEpD,yDAAyD;wBACzD,IAAI,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAoB,CAAC;wBAClE,SAAS,CAAC,SAAS,GAAG,OAAK,UAAU,CAAC,oBAAoB,CAAC,CAAC;wBAC5D,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;wBAEhC,2EAA2E;wBAC3E,KAAgC,UAAW,EAAX,2BAAW,EAAX,yBAAW,EAAX,IAAW,EAAE;4BAAxC,IAAI,mBAAmB,oBAAA;4BACxB,IAAI,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC,CAAC;4BAC/D,IAAI,kBAAkB,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAoB,CAAC;4BAC3E,QAAQ,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;4BACzC,IAAI,kBAAkB,GAAG,IAAI,kBAAkB,CAAC;gCAC5C,SAAS,EAAE;oCACP,QAAQ,EAAE,SAAS,CAAC,gBAAgB,CAAC,QAAQ,CAAC;oCAC9C,KAAK,EAAE,KAAK;oCACZ,QAAQ,EAAE,QAAQ;iCACrB;6BACJ,CAAC,CAAC;4BACH,kBAAkB,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;yBACjD;qBACJ;yBACI;wBACD,qBAAqB;wBACrB,MAAM,IAAI,KAAK,CAAC,gCAAgC,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;qBAClE;oBAED,sBAAsB;oBACtB,IAAI,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC;oBACpD,IAAI,SAAS,GAAG,YAAY,CAAC,MAAM;wBAC/B,YAAY,GAAG,YAAY,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;;wBAEjD,YAAY,GAAG,EAAE,CAAC;iBACzB;qBACI;oBACD,SAAS,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;oBAC7B,uBAAuB;oBACvB,YAAY,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;iBAC5C;;;YAxGL,OAAO,YAAY,CAAC,MAAM,GAAG,CAAC;;aA0G7B;YAED,IAAI,SAAS,IAAI,EAAE,EAAE;gBACjB,IAAI,cAAc,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAoB,CAAC;gBACvE,cAAc,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;gBACtD,QAAQ,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;aACxC;YAED,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;QACvD,CAAC;QAED,UAAU,EAAE,UAAU,GAAW;YAC7B,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC1I,CAAC;KACJ;IACD,UAAU,EAAE;QACR,OAAO,SAAA;QACP,SAAS,WAAA;KACZ;CACJ,CAAC,CAAC","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport Vue from \"vue\";\n\nimport ChatLine from \"../interfaces/ChatLine\";\n\nimport TQGlobals from \"../classes/TQGlobals\";\n\nimport IfDebug from \"./IfDebug.vue\";\nimport TimeStamp from \"./TimeStamp.vue\";\nimport PriceDeviationView from \"./PriceDeviationView.vue\";\n\nexport default Vue.extend({\n    props: {\n        chatLine: {\n            type: Object as () => ChatLine,\n            required: true\n        },\n        showTimestamp: {\n            type: Boolean,\n            required: true\n        },\n        itemNameLinks: {\n            type: Boolean,\n            required: true\n        },\n        itemNameToHighlight: {\n            type: String,\n            required: false\n        },\n        cssClass: {\n            type: String,\n            required: false\n        }\n    },\n    watch: {\n        chatLine: function (newValue, oldValue) {\n            this.rebuildText();\n        }\n    },\n    mounted: function () {\n        this.rebuildText();\n    },\n    methods: {\n\n        rebuildText: function () {\n            let textSpan = this.$el.querySelector(\".tqChatLineView_PlayerText\") as HTMLSpanElement;\n\n            // remove whatever text we built in there last time\n            while (textSpan.lastChild) {\n                textSpan.removeChild(textSpan.lastChild);\n            }\n\n            textSpan.appendChild(document.createTextNode(\"'\"));\n\n            let indexedItemNames = new Array<string>(); // used when adding PriceDeviationComponents\n            let unparsedText = this.chatLine.text;\n            let textSoFar = \"\"\n            let nextTokenIndex = 0;\n            while (unparsedText.length > 0) {\n\n                if (unparsedText.substring(0, TQGlobals.settings.chatToken.length) === TQGlobals.settings.chatToken) {\n                    // the next word is a special data token\n\n                    // create a text span for the player-typed words we've found up to this point in the loop\n                    let playerTextSpan = document.createElement(\"span\") as HTMLSpanElement;\n                    playerTextSpan.innerHTML = this.htmlEncode(textSoFar);\n                    textSpan.appendChild(playerTextSpan);\n                    textSoFar = \"\"; // reset textSoFar for the next iteration after the token\n\n                    let token = this.chatLine.tokens[nextTokenIndex];\n                    nextTokenIndex++;\n\n                    if (token.type == \"ITEM\") {\n                        // item name token\n\n                        let isKnownItem = (token.properties[\"isKnown\"] == \"1\");\n                        let itemName = token.properties[\"itemName\"];\n                        let text = token.properties[\"text\"];\n                        let aliasedItemName = TQGlobals.resolveItemAlias(itemName);\n                        let urlEncodedAliasedItemName = encodeURIComponent(aliasedItemName);\n\n                        indexedItemNames.push(itemName);\n\n                        if (this.itemNameLinks) {\n                            // make the item name a clickable link\n                            let linkElem = document.createElement(\"a\") as HTMLAnchorElement;\n\n                            linkElem.classList.add(isKnownItem ? \"tqKnownItemLink\" : \"tqUnknownItemLink\");\n                            if (this.itemNameToHighlight == itemName)\n                                linkElem.classList.add(\"tqHighlightedItemLink\");\n\n                            linkElem.href = \"/item/\" + urlEncodedAliasedItemName;\n                            let thisComponent = this;\n                            linkElem.addEventListener(\"click\", function (e) {\n                                e.preventDefault();\n                                thisComponent.$router.push(\"/item/\" + urlEncodedAliasedItemName);\n                            });\n                            linkElem.text = text;\n                            textSpan.appendChild(linkElem);\n                        }\n                        else if (this.itemNameToHighlight == itemName) {\n                            // highlight the item name without making it a clickable link\n                            let spanElem = document.createElement(\"span\") as HTMLSpanElement;\n                            spanElem.classList.add(isKnownItem ? \"tqKnownItemLink\" : \"tqUnknownItemLink\");\n                            spanElem.innerHTML = this.htmlEncode(text);\n                            textSpan.appendChild(spanElem);\n                        }\n                        else {\n                            textSoFar += text;\n                        }\n\n                    }\n                    else if (token.type == \"PRICE\") {\n                        // price token\n\n                        // stub\n                        if (!token.properties[\"items\"]) {\n                            console.log(\"STUB!!!\");\n                            console.log(this.chatLine);\n                        }\n\n                        let isBuying = (token.properties[\"isBuying\"] == \"1\");\n                        let price = parseInt(token.properties[\"price\"]);\n                        let itemIndexes = token.properties[\"items\"].split(',');\n                        let playerTypedPriceText = token.properties[\"text\"];\n\n                        // render the text that the player actually typed in chat\n                        let priceElem = document.createElement(\"span\") as HTMLSpanElement;\n                        priceElem.innerHTML = this.htmlEncode(playerTypedPriceText);\n                        textSpan.appendChild(priceElem);\n\n                        // now create a PriceDeviationView for each item associated with this price\n                        for (let itemNameIndexString of itemIndexes) {\n                            let itemName = indexedItemNames[parseInt(itemNameIndexString)];\n                            let priceDeviationElem = document.createElement(\"span\") as HTMLSpanElement;\n                            textSpan.appendChild(priceDeviationElem);\n                            let priceDeviationView = new PriceDeviationView({\n                                propsData: {\n                                    itemName: TQGlobals.resolveItemAlias(itemName),\n                                    price: price,\n                                    isBuying: isBuying\n                                }\n                            });\n                            priceDeviationView.$mount(priceDeviationElem);\n                        }\n                    }\n                    else {\n                        // unrecognized token\n                        throw new Error(\"Unrecognized chat token type: \" + token.type);\n                    }\n\n                    // update unparsedText\n                    let nextIndex = TQGlobals.settings.chatToken.length;\n                    if (nextIndex < unparsedText.length)\n                        unparsedText = unparsedText.substring(nextIndex);\n                    else\n                        unparsedText = \"\";\n                }\n                else {\n                    textSoFar += unparsedText[0];\n                    // updated unparsedText\n                    unparsedText = unparsedText.substring(1);\n                }\n                \n            }\n\n            if (textSoFar != \"\") {\n                let playerTextSpan = document.createElement(\"span\") as HTMLSpanElement;\n                playerTextSpan.innerHTML = this.htmlEncode(textSoFar);\n                textSpan.appendChild(playerTextSpan);\n            }\n\n            textSpan.appendChild(document.createTextNode(\"'\"));\n        },\n\n        htmlEncode: function (str: string) {\n            return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/ /g, '&nbsp;');\n        }\n    },\n    components: {\n        IfDebug,\n        TimeStamp\n    }\n});\n"]}]}