{"remainingRequest":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\thread-loader\\dist\\cjs.js!c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js??ref--12-2!c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\mixins\\TqPage.ts","dependencies":[{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\mixins\\TqPage.ts","mtime":1552274706979},{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import Vue from \"vue\";\r\nimport TQGlobals from \"../classes/TQGlobals\";\r\n// TqPage is the base page from which every page inherits\r\nexport default Vue.extend({\r\n    data: function () {\r\n        return {};\r\n    },\r\n    beforeMount: function () {\r\n        //stub\r\n        //console.log(\"TqPage.beforeMount\");\r\n    },\r\n    mounted: function () {\r\n        //stub\r\n        //console.log(\"TqPage.mounted\");\r\n    },\r\n    activated: function () {\r\n        //stub\r\n        //console.log(\"TqPage.activated\");\r\n    },\r\n    deactivated: function () {\r\n        //stub\r\n        //console.log(\"TqPage.deactivated\");\r\n    },\r\n    beforeDestroy: function () {\r\n        //stub\r\n        //console.log(\"TqPage.beforeDestroy\");\r\n    },\r\n    methods: {\r\n        onNewContent: function (newContent, enforceMaxSize) {\r\n            // fetch all price histories at once\r\n            if (newContent.lines) {\r\n                for (var chatLineId in newContent.lines) {\r\n                    var chatLine = newContent.lines[chatLineId];\r\n                    for (var _i = 0, _a = chatLine.tokens; _i < _a.length; _i++) {\r\n                        var token = _a[_i];\r\n                        if (token.type == \"ITEM\") {\r\n                            TQGlobals.priceHistories.get(token.properties[\"itemName\"], false);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (newContent.auctions) {\r\n                for (var auctionId in newContent.auctions) {\r\n                    var auction = newContent.auctions[auctionId];\r\n                    auction.chatLine = newContent.lines[auction.chatLineId];\r\n                    TQGlobals.priceHistories.get(auction.itemName, false);\r\n                }\r\n            }\r\n            TQGlobals.priceHistories.fetchPendingPriceHistories();\r\n            // STUB - filtering logic goes here\r\n            // pass along to child classes\r\n            this.onFilteredContent(newContent, enforceMaxSize);\r\n        },\r\n        onScroll: function () {\r\n            //console.log(\"stub onScroll\");\r\n            if (document == null || document.documentElement == null)\r\n                return;\r\n            // stub\r\n            //console.log(\"scrollTop \" + document.documentElement.scrollTop.toString() + \" innerHeight \" + window.innerHeight.toString() + \" scrollheight \" + document.documentElement.scrollHeight.toString());\r\n            if (this.isScrolledToBottom())\r\n                this.getEarlierContent();\r\n            this.onScrolled();\r\n        },\r\n        isScrolledToTop: function () {\r\n            return (document != null && document.documentElement != null && document.documentElement.scrollTop == 0);\r\n        },\r\n        isScrolledToBottom: function () {\r\n            return (document != null && document.documentElement != null && Math.ceil(document.documentElement.scrollTop) + window.innerHeight >= document.documentElement.scrollHeight);\r\n        },\r\n        onScrolled: function () {\r\n            // overridden by extending components\r\n        },\r\n        getLatestContent: function () {\r\n            // overridden by extending components\r\n        },\r\n        getEarlierContent: function () {\r\n            // overridden by extending components\r\n        },\r\n        onFilteredContent: function (newContent, enforceMaxSize) {\r\n            // overridden by extending components\r\n        },\r\n    }\r\n});\r\n",{"version":3,"file":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\mixins\\TqPage.ts","sourceRoot":"","sources":["c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\mixins\\TqPage.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport Vue from \"vue\";\r\n\r\nimport LinesAndAuctions from \"../interfaces/LinesAndAuctions\";\r\n\r\nimport TQGlobals from \"../classes/TQGlobals\";\r\n\r\n\r\n// TqPage is the base page from which every page inherits\r\n\r\nexport default Vue.extend({\r\n\r\n    data: function () {\r\n        return {\r\n        };\r\n    },\r\n\r\n    beforeMount: function () {\r\n        //stub\r\n        //console.log(\"TqPage.beforeMount\");\r\n    },\r\n\r\n    mounted: function () {\r\n        //stub\r\n        //console.log(\"TqPage.mounted\");\r\n    },\r\n\r\n    activated: function () {\r\n        //stub\r\n        //console.log(\"TqPage.activated\");\r\n    },\r\n\r\n    deactivated: function () {\r\n        //stub\r\n        //console.log(\"TqPage.deactivated\");\r\n    },\r\n\r\n    beforeDestroy: function () {\r\n        //stub\r\n        //console.log(\"TqPage.beforeDestroy\");\r\n    },\r\n\r\n    methods: {\r\n\r\n        onNewContent: function (newContent: LinesAndAuctions, enforceMaxSize: boolean) {\r\n\r\n            // fetch all price histories at once\r\n\r\n            if (newContent.lines) {\r\n                for (let chatLineId in newContent.lines) {\r\n                    let chatLine = newContent.lines[chatLineId];\r\n\r\n                    for (let token of chatLine.tokens) {\r\n                        if (token.type == \"ITEM\") {\r\n                            TQGlobals.priceHistories.get(token.properties[\"itemName\"], false);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (newContent.auctions) {\r\n                for (let auctionId in newContent.auctions) {\r\n                    let auction = newContent.auctions[auctionId];\r\n                    auction.chatLine = newContent.lines[auction.chatLineId];\r\n                    TQGlobals.priceHistories.get(auction.itemName, false);\r\n                }\r\n            }\r\n            TQGlobals.priceHistories.fetchPendingPriceHistories();\r\n\r\n\r\n            // STUB - filtering logic goes here\r\n\r\n\r\n            // pass along to child classes\r\n            this.onFilteredContent(newContent, enforceMaxSize);\r\n        },\r\n\r\n        onScroll: function () {\r\n            //console.log(\"stub onScroll\");\r\n\r\n            if (document == null || document.documentElement == null)\r\n                return;\r\n\r\n            // stub\r\n            //console.log(\"scrollTop \" + document.documentElement.scrollTop.toString() + \" innerHeight \" + window.innerHeight.toString() + \" scrollheight \" + document.documentElement.scrollHeight.toString());\r\n\r\n            if (this.isScrolledToBottom())\r\n                this.getEarlierContent();\r\n\r\n            this.onScrolled();\r\n        },\r\n\r\n        isScrolledToTop: function () {\r\n            return (document != null && document.documentElement != null && document.documentElement.scrollTop == 0);\r\n        },\r\n\r\n        isScrolledToBottom: function () {\r\n            return (document != null && document.documentElement != null && Math.ceil(document.documentElement.scrollTop) + window.innerHeight >= document.documentElement.scrollHeight);\r\n        },\r\n\r\n        onScrolled: function () {\r\n            // overridden by extending components\r\n        },\r\n\r\n        getLatestContent: function () {\r\n            // overridden by extending components\r\n        },\r\n\r\n        getEarlierContent: function () {\r\n            // overridden by extending components\r\n        },\r\n\r\n        onFilteredContent: function (newContent: LinesAndAuctions, enforceMaxSize: boolean) {\r\n            // overridden by extending components\r\n        },\r\n    }\r\n});\r\n"]}]}