{"remainingRequest":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js??ref--12-2!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\mixins\\LiveAuctionsPage.ts","dependencies":[{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\mixins\\LiveAuctionsPage.ts","mtime":1551928332644},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import axios from \"axios\";\r\nimport mixins from 'vue-typed-mixins';\r\nimport * as moment from \"moment\";\r\nimport LivePage from \"../mixins/LivePage\";\r\nimport TQGlobals from \"../classes/TQGlobals\";\r\nimport SlidingList from \"../classes/SlidingList\";\r\nexport default mixins(LivePage).extend({\r\n    data: function () {\r\n        return {\r\n            // STUB hard-coded\r\n            serverCode: \"BLUE\",\r\n            auctions: new SlidingList(function (a, b) {\r\n                // sort ascending updatedAtString\r\n                if (a.updatedAtString < b.updatedAtString)\r\n                    return -1;\r\n                else if (a.updatedAtString > b.updatedAtString)\r\n                    return 1;\r\n                else {\r\n                    // sort ascending id\r\n                    if (a.id < b.id)\r\n                        return -1;\r\n                    else if (a.id > b.id)\r\n                        return 1;\r\n                    else\r\n                        return 0;\r\n                }\r\n            })\r\n        };\r\n    },\r\n    computed: {\r\n        recentlyUpdatedAuctions: function () {\r\n            return this.auctions.array\r\n                .filter(function (auction, index) {\r\n                // avoid temporarily showing \"duplicate\" auctions when a new auction is created to replace an older auction\r\n                // by immediately hiding the older auction in the recentlyUpdatedAuctions panel\r\n                return !auction.isPreviousAuction;\r\n            })\r\n                .filter(function (auction, index) {\r\n                return moment.duration(moment.default().diff(auction.updatedAtMoment)).asMinutes() <= 15;\r\n            })\r\n                .sort(function (a, b) {\r\n                // sort descending firstSeenDate\r\n                if (a.firstSeenDate < b.firstSeenDate)\r\n                    return 1;\r\n                else if (a.firstSeenDate > b.firstSeenDate)\r\n                    return -1;\r\n                else {\r\n                    // sort descending id\r\n                    if (a.id < b.id)\r\n                        return 1;\r\n                    else if (a.id > b.id)\r\n                        return -1;\r\n                    else\r\n                        return 0;\r\n                }\r\n            });\r\n        },\r\n        notRecentlyUpdatedAuctions: function () {\r\n            return this.auctions.array\r\n                .filter(function (auction, index) {\r\n                return moment.duration(moment.default().diff(auction.updatedAtMoment)).asMinutes() > 15;\r\n            })\r\n                .sort(function (a, b) {\r\n                // sort descending updatedAtString\r\n                if (a.updatedAtString < b.updatedAtString)\r\n                    return 1;\r\n                else if (a.updatedAtString > b.updatedAtString)\r\n                    return -1;\r\n                else {\r\n                    // sort descending id\r\n                    if (a.id < b.id)\r\n                        return 1;\r\n                    else if (a.id > b.id)\r\n                        return -1;\r\n                    else\r\n                        return 0;\r\n                }\r\n            });\r\n        }\r\n    },\r\n    methods: {\r\n        // inherited from LivePage\r\n        getHubUrl: function () {\r\n            // STUB hard-coded\r\n            return \"/blue_auction_hub\";\r\n        },\r\n        // inherited from LivePage\r\n        onInitialized: function () {\r\n            console.log(\"stub LiveAuctionsPage.onInitialized\");\r\n            this.auctions.maxSize = TQGlobals.settings.maxAuctions;\r\n        },\r\n        // inherited from LivePage\r\n        getLatestContent: function () {\r\n            var _this = this;\r\n            var minUpdatedAt = null;\r\n            if (this.auctions.array.length > 0) {\r\n                minUpdatedAt = new Date(this.auctions.array[this.auctions.array.length - 1].updatedAtString);\r\n                // add 1 ms so we don't always get one auction that we already know about in the results\r\n                minUpdatedAt = new Date(minUpdatedAt.getTime() + 1);\r\n            }\r\n            axios.get('/api/auctions?serverCode=' + this.serverCode + \"&minUpdatedAt=\" + (minUpdatedAt == null ? \"\" : minUpdatedAt.toISOString()))\r\n                .then(function (response) {\r\n                var result = response.data;\r\n                _this.onNewContent(result, true);\r\n            })\r\n                .catch(function (err) {\r\n                // stub\r\n                console.log(err);\r\n            }); // end axios.get(chat_lines)\r\n        },\r\n        // inherited from LivePage\r\n        getEarlierContent: function () {\r\n            var _this = this;\r\n            var maxUpdatedAt = null;\r\n            if (this.auctions.array.length > 0) {\r\n                maxUpdatedAt = new Date(this.auctions.array[0].updatedAtString);\r\n                // subtract 1 ms so we don't always get one auction that we already know about in the results\r\n                maxUpdatedAt = new Date(maxUpdatedAt.getTime() - 1);\r\n            }\r\n            axios.get('/api/auctions?serverCode=' + this.serverCode + \"&maxUpdatedAt=\" + (maxUpdatedAt == null ? \"\" : maxUpdatedAt.toISOString()) + \"&maxResults=\" + TQGlobals.settings.maxAuctions.toString())\r\n                .then(function (response) {\r\n                var result = response.data;\r\n                _this.onNewContent(result, false);\r\n            })\r\n                .catch(function (err) {\r\n                // stub\r\n                console.log(err);\r\n            }); // end axios.get(chat_lines)\r\n        },\r\n        // inherited from LivePage\r\n        onFilteredContent: function (newContent, enforceMaxSize) {\r\n            // stub\r\n            console.log(\"LiveAuctionsPage.onNewContent():\");\r\n            console.log(newContent);\r\n            // manually set some properties on the auction objects\r\n            for (var auctionId in newContent.auctions) {\r\n                var auction = newContent.auctions[auctionId];\r\n                auction.chatLine = newContent.lines[auction.chatLineId];\r\n                auction.updatedAtMoment = moment.utc(auction.updatedAtString).local();\r\n                // if necessary, update the previous auction object\r\n                if (auction.previousAuctionId != null) {\r\n                    var prevAuction = this.auctions.dict.get(auction.previousAuctionId);\r\n                    if (prevAuction) {\r\n                        prevAuction.isPreviousAuction = true;\r\n                        // also copy over the firstSeenDate from the previous auction so that the new auction will \r\n                        // take the previous auction's place in the sort order, instead of appearing at the top\r\n                        auction.firstSeenDate = prevAuction.firstSeenDate;\r\n                    }\r\n                }\r\n                // transfer the firstSeenMoment from the previously existing entry, if it exists\r\n                var existingEntry = this.auctions.dict.get(auction.id);\r\n                if (existingEntry)\r\n                    auction.firstSeenDate = existingEntry.firstSeenDate;\r\n                else\r\n                    auction.firstSeenDate = new Date();\r\n                this.onNewAuction(auction); // this has to happen FIRST so that auction.item is set BEFORE the auction is added to the SlidingList, or else Vue won't detect when auction.item's properties are filled in by ajax later\r\n                this.auctions.add(auction);\r\n            }\r\n            if (enforceMaxSize)\r\n                this.auctions.enforceMaxSize();\r\n            this.auctions.sort();\r\n            // call this last to fetch all items and simultaneously (because it's far more efficient than making an ajax call for every individual item)\r\n            TQGlobals.items.fetchPendingItems();\r\n        },\r\n        // inherited from LivePage\r\n        onDestroying: function () {\r\n            this.auctions.clear();\r\n        },\r\n        onNewAuction: function (auction) {\r\n            // overridden by extending components\r\n        },\r\n    }\r\n});\r\n",{"version":3,"file":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\mixins\\LiveAuctionsPage.ts","sourceRoot":"","sources":["C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\mixins\\LiveAuctionsPage.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport axios from \"axios\";\r\nimport mixins from 'vue-typed-mixins';\r\nimport * as _ from \"lodash\";\r\nimport * as moment from \"moment\";\r\n\r\nimport Auction from \"../interfaces/Auction\";\r\nimport LinesAndAuctions from \"../interfaces/LinesAndAuctions\";\r\n\r\nimport LivePage from \"../mixins/LivePage\";\r\n\r\nimport TQGlobals from \"../classes/TQGlobals\";\r\nimport SlidingList from \"../classes/SlidingList\";\r\n\r\n\r\nexport default mixins(LivePage).extend({\r\n\r\n    data: function () {\r\n        return {\r\n            // STUB hard-coded\r\n            serverCode: \"BLUE\",\r\n\r\n            auctions: new SlidingList<Auction>(function (a: Auction, b: Auction) {\r\n                // sort ascending updatedAtString\r\n                if (a.updatedAtString < b.updatedAtString)\r\n                    return -1;\r\n                else if (a.updatedAtString > b.updatedAtString)\r\n                    return 1;\r\n                else {\r\n                    // sort ascending id\r\n                    if (a.id < b.id)\r\n                        return -1;\r\n                    else if (a.id > b.id)\r\n                        return 1;\r\n                    else\r\n                        return 0;\r\n                }\r\n            })\r\n        };\r\n    },\r\n\r\n    computed: {\r\n        recentlyUpdatedAuctions: function () {\r\n            return this.auctions.array\r\n                .filter(function (auction: Auction, index: number) {\r\n                    // avoid temporarily showing \"duplicate\" auctions when a new auction is created to replace an older auction\r\n                    // by immediately hiding the older auction in the recentlyUpdatedAuctions panel\r\n                    return !auction.isPreviousAuction;\r\n                })\r\n                .filter(function (auction: Auction, index: number) {\r\n                    return moment.duration(moment.default().diff(auction.updatedAtMoment)).asMinutes() <= 15;\r\n                })\r\n                .sort(function (a: Auction, b: Auction) {\r\n                    // sort descending firstSeenDate\r\n                    if (a.firstSeenDate < b.firstSeenDate)\r\n                        return 1;\r\n                    else if (a.firstSeenDate > b.firstSeenDate)\r\n                        return -1;\r\n                    else {\r\n                        // sort descending id\r\n                        if (a.id < b.id)\r\n                            return 1;\r\n                        else if (a.id > b.id)\r\n                            return -1;\r\n                        else\r\n                            return 0;\r\n                    }\r\n                });\r\n        },\r\n\r\n        notRecentlyUpdatedAuctions: function () {\r\n            return this.auctions.array\r\n                .filter(function (auction: Auction, index: number) {\r\n                    return moment.duration(moment.default().diff(auction.updatedAtMoment)).asMinutes() > 15;\r\n                })\r\n                .sort(function (a: Auction, b: Auction) {\r\n                    // sort descending updatedAtString\r\n                    if (a.updatedAtString < b.updatedAtString)\r\n                        return 1;\r\n                    else if (a.updatedAtString > b.updatedAtString)\r\n                        return -1;\r\n                    else {\r\n                        // sort descending id\r\n                        if (a.id < b.id)\r\n                            return 1;\r\n                        else if (a.id > b.id)\r\n                            return -1;\r\n                        else\r\n                            return 0;\r\n                    }\r\n                });\r\n        }\r\n    },\r\n    methods: {\r\n\r\n        // inherited from LivePage\r\n        getHubUrl: function () {\r\n            // STUB hard-coded\r\n            return \"/blue_auction_hub\";\r\n        },\r\n\r\n        // inherited from LivePage\r\n        onInitialized: function () {\r\n            console.log(\"stub LiveAuctionsPage.onInitialized\");\r\n\r\n            this.auctions.maxSize = TQGlobals.settings.maxAuctions;\r\n        },\r\n\r\n        // inherited from LivePage\r\n        getLatestContent: function () {\r\n            let minUpdatedAt: Date | null = null;\r\n            if (this.auctions.array.length > 0) {\r\n                minUpdatedAt = new Date(this.auctions.array[this.auctions.array.length - 1].updatedAtString);\r\n\r\n                // add 1 ms so we don't always get one auction that we already know about in the results\r\n                minUpdatedAt = new Date(minUpdatedAt.getTime() + 1);\r\n            }\r\n\r\n            axios.get('/api/auctions?serverCode=' + this.serverCode + \"&minUpdatedAt=\" + (minUpdatedAt == null ? \"\" : minUpdatedAt.toISOString()))\r\n                .then(response => {\r\n                    let result = response.data as LinesAndAuctions;\r\n                    this.onNewContent(result, true);\r\n                })\r\n                .catch(err => {\r\n                    // stub\r\n                    console.log(err);\r\n                }); // end axios.get(chat_lines)\r\n        },\r\n\r\n        // inherited from LivePage\r\n        getEarlierContent: function () {\r\n\r\n            let maxUpdatedAt: Date | null = null;\r\n            if (this.auctions.array.length > 0) {\r\n                maxUpdatedAt = new Date(this.auctions.array[0].updatedAtString);\r\n\r\n                // subtract 1 ms so we don't always get one auction that we already know about in the results\r\n                maxUpdatedAt = new Date(maxUpdatedAt.getTime() - 1);\r\n            }\r\n\r\n            axios.get('/api/auctions?serverCode=' + this.serverCode + \"&maxUpdatedAt=\" + (maxUpdatedAt == null ? \"\" : maxUpdatedAt.toISOString()) + \"&maxResults=\" + TQGlobals.settings.maxAuctions.toString())\r\n                .then(response => {\r\n                    let result = response.data as LinesAndAuctions;\r\n                    this.onNewContent(result, false);\r\n                })\r\n                .catch(err => {\r\n                    // stub\r\n                    console.log(err);\r\n                }); // end axios.get(chat_lines)\r\n        },\r\n\r\n        // inherited from LivePage\r\n        onFilteredContent: function (newContent: LinesAndAuctions, enforceMaxSize: boolean) {\r\n            // stub\r\n            console.log(\"LiveAuctionsPage.onNewContent():\");\r\n            console.log(newContent);\r\n\r\n            // manually set some properties on the auction objects\r\n\r\n            for (let auctionId in newContent.auctions) {\r\n                let auction = newContent.auctions[auctionId];\r\n                auction.chatLine = newContent.lines[auction.chatLineId];\r\n                auction.updatedAtMoment = moment.utc(auction.updatedAtString).local();\r\n\r\n                // if necessary, update the previous auction object\r\n                if (auction.previousAuctionId != null) {\r\n                    let prevAuction = this.auctions.dict.get(auction.previousAuctionId);\r\n                    if (prevAuction) {\r\n                        prevAuction.isPreviousAuction = true;\r\n                        // also copy over the firstSeenDate from the previous auction so that the new auction will \r\n                        // take the previous auction's place in the sort order, instead of appearing at the top\r\n                        auction.firstSeenDate = prevAuction.firstSeenDate;\r\n                    }\r\n                }\r\n                \r\n                // transfer the firstSeenMoment from the previously existing entry, if it exists\r\n                let existingEntry = this.auctions.dict.get(auction.id);\r\n                if (existingEntry)\r\n                    auction.firstSeenDate = existingEntry.firstSeenDate;\r\n                else\r\n                    auction.firstSeenDate = new Date();\r\n\r\n                this.onNewAuction(auction); // this has to happen FIRST so that auction.item is set BEFORE the auction is added to the SlidingList, or else Vue won't detect when auction.item's properties are filled in by ajax later\r\n                this.auctions.add(auction);\r\n            }\r\n\r\n            if (enforceMaxSize)\r\n                this.auctions.enforceMaxSize();\r\n            this.auctions.sort();\r\n\r\n            // call this last to fetch all items and simultaneously (because it's far more efficient than making an ajax call for every individual item)\r\n            TQGlobals.items.fetchPendingItems();\r\n        },\r\n\r\n        // inherited from LivePage\r\n        onDestroying: function () {\r\n            this.auctions.clear();\r\n        },\r\n\r\n\r\n        onNewAuction: function (auction: Auction) {\r\n            // overridden by extending components\r\n        },\r\n    }\r\n});"]}]}