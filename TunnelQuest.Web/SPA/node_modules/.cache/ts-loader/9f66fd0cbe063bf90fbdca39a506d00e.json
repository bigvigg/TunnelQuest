{"remainingRequest":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js??ref--12-2!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\mixins\\LiveComponent.ts","dependencies":[{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\mixins\\LiveComponent.ts","mtime":1548120527092},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import Vue from \"vue\";\r\nimport TQGlobals from \"../classes/TQGlobals\";\r\n// LiveComponent provides core functionality for components that need to react to the live data feed in real-time\r\nexport default Vue.extend({\r\n    mounted: function () {\r\n        var _this = this;\r\n        TQGlobals.init(function () {\r\n            // wire event handlers\r\n            TQGlobals.connection.on(\"NewChatLines\", _this.onNewContent);\r\n            TQGlobals.connection.onConnected(_this.onConnected);\r\n            TQGlobals.connection.onDisconnected(_this.onDisconnected);\r\n            _this.onInitialized();\r\n        });\r\n    },\r\n    beforeDestroy: function () {\r\n        // unwire event handlers\r\n        TQGlobals.connection.off(\"NewChatLines\", this.onNewContent);\r\n        TQGlobals.connection.offConnected(this.onConnected);\r\n        TQGlobals.connection.offDisconnected(this.onDisconnected);\r\n    },\r\n    methods: {\r\n        wireUpRelationships: function (newContent) {\r\n            // populate all of the auction.chatLine properties\r\n            for (var auctionId in newContent.auctions) {\r\n                var auction = newContent.auctions[auctionId];\r\n                auction.chatLine = newContent.lines[auction.chatLineId];\r\n            }\r\n            // populate all of the chatLine.auction properties\r\n            for (var chatLineId in newContent.lines) {\r\n                var chatLine = newContent.lines[chatLineId];\r\n                chatLine.auctions = new Array();\r\n                for (var _i = 0, _a = chatLine.auctionIds; _i < _a.length; _i++) {\r\n                    var auctionId = _a[_i];\r\n                    chatLine.auctions[auctionId] = newContent.auctions[auctionId];\r\n                }\r\n            }\r\n        },\r\n        onInitialized: function () {\r\n            // overridden by extending components\r\n        },\r\n        onNewContent: function (newContent) {\r\n            // overridden by extending components\r\n        },\r\n        onConnected: function () {\r\n            // overridden by extending components\r\n        },\r\n        onDisconnected: function () {\r\n            // overridden by extending components\r\n        }\r\n    }\r\n});\r\n",{"version":3,"file":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\mixins\\LiveComponent.ts","sourceRoot":"","sources":["C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\mixins\\LiveComponent.ts"],"names":[],"mappings":"AACA,OAAO,GAAG,MAAM,KAAK,CAAC;AAEtB,OAAO,SAAS,MAAM,sBAAsB,CAAC;AAK7C,iHAAiH;AAEjH,eAAe,GAAG,CAAC,MAAM,CAAC;IAEtB,OAAO,EAAE;QAAA,iBASR;QARG,SAAS,CAAC,IAAI,CAAC;YACX,sBAAsB;YACtB,SAAS,CAAC,UAAU,CAAC,EAAE,CAAC,cAAc,EAAE,KAAI,CAAC,YAAY,CAAC,CAAC;YAC3D,SAAS,CAAC,UAAU,CAAC,WAAW,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC;YACnD,SAAS,CAAC,UAAU,CAAC,cAAc,CAAC,KAAI,CAAC,cAAc,CAAC,CAAC;YAEzD,KAAI,CAAC,aAAa,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,aAAa,EAAE;QACX,wBAAwB;QACxB,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QAC5D,SAAS,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACpD,SAAS,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC9D,CAAC;IAED,OAAO,EAAE;QACL,mBAAmB,EAAE,UAAU,UAA4B;YAEvD,kDAAkD;YAClD,KAAK,IAAI,SAAS,IAAI,UAAU,CAAC,QAAQ,EAAE;gBACvC,IAAI,OAAO,GAAG,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;gBAC7C,OAAO,CAAC,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;aAC3D;YAED,kDAAkD;YAClD,KAAK,IAAI,UAAU,IAAI,UAAU,CAAC,KAAK,EAAE;gBACrC,IAAI,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;gBAC5C,QAAQ,CAAC,QAAQ,GAAG,IAAI,KAAK,EAAW,CAAC;gBACzC,KAAsB,UAAmB,EAAnB,KAAA,QAAQ,CAAC,UAAU,EAAnB,cAAmB,EAAnB,IAAmB,EAAE;oBAAtC,IAAI,SAAS,SAAA;oBACd,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;iBACjE;aACJ;QACL,CAAC;QAED,aAAa,EAAE;YACX,qCAAqC;QACzC,CAAC;QAED,YAAY,EAAE,UAAU,UAA4B;YAChD,qCAAqC;QACzC,CAAC;QAED,WAAW,EAAE;YACT,qCAAqC;QACzC,CAAC;QAED,cAAc,EAAE;YACZ,qCAAqC;QACzC,CAAC;KACJ;CACJ,CAAC,CAAC","sourcesContent":["\r\nimport Vue from \"vue\";\r\n\r\nimport TQGlobals from \"../classes/TQGlobals\";\r\n\r\nimport Auction from \"../interfaces/Auction\";\r\nimport LinesAndAuctions from \"../interfaces/LinesAndAuctions\";\r\n\r\n// LiveComponent provides core functionality for components that need to react to the live data feed in real-time\r\n\r\nexport default Vue.extend({\r\n\r\n    mounted: function () {\r\n        TQGlobals.init(() => {\r\n            // wire event handlers\r\n            TQGlobals.connection.on(\"NewChatLines\", this.onNewContent);\r\n            TQGlobals.connection.onConnected(this.onConnected);\r\n            TQGlobals.connection.onDisconnected(this.onDisconnected);\r\n\r\n            this.onInitialized();\r\n        });\r\n    },\r\n\r\n    beforeDestroy: function () {\r\n        // unwire event handlers\r\n        TQGlobals.connection.off(\"NewChatLines\", this.onNewContent);\r\n        TQGlobals.connection.offConnected(this.onConnected);\r\n        TQGlobals.connection.offDisconnected(this.onDisconnected);\r\n    },\r\n\r\n    methods: {\r\n        wireUpRelationships: function (newContent: LinesAndAuctions) {\r\n\r\n            // populate all of the auction.chatLine properties\r\n            for (let auctionId in newContent.auctions) {\r\n                let auction = newContent.auctions[auctionId];\r\n                auction.chatLine = newContent.lines[auction.chatLineId];\r\n            }\r\n\r\n            // populate all of the chatLine.auction properties\r\n            for (let chatLineId in newContent.lines) {\r\n                let chatLine = newContent.lines[chatLineId];\r\n                chatLine.auctions = new Array<Auction>();\r\n                for (let auctionId of chatLine.auctionIds) {\r\n                    chatLine.auctions[auctionId] = newContent.auctions[auctionId];\r\n                }\r\n            }\r\n        },\r\n\r\n        onInitialized: function () {\r\n            // overridden by extending components\r\n        },\r\n\r\n        onNewContent: function (newContent: LinesAndAuctions) {\r\n            // overridden by extending components\r\n        },\r\n\r\n        onConnected: function () {\r\n            // overridden by extending components\r\n        },\r\n\r\n        onDisconnected: function () {\r\n            // overridden by extending components\r\n        }\r\n    }\r\n});\r\n"]}]}