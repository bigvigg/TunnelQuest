{"remainingRequest":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\thread-loader\\dist\\cjs.js!c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js??ref--12-2!c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\mixins\\LivePage.ts","dependencies":[{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\mixins\\LivePage.ts","mtime":1552274409572},{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import mixins from 'vue-typed-mixins';\r\nimport TQGlobals from \"../classes/TQGlobals\";\r\nimport ConnectionWrapper from \"../classes/ConnectionWrapper\";\r\nimport TqPage from \"../mixins/TqPage\";\r\n// LivePage provides functionality for page components that need to display an overall snapshot of the recent live data feed in real-time (i.e. ChatView and AuctionHouseView)\r\nexport default mixins(TqPage).extend({\r\n    data: function () {\r\n        return {\r\n            isInitialized: false,\r\n            transitionName: \"slidedown\",\r\n            connection: new ConnectionWrapper()\r\n        };\r\n    },\r\n    beforeRouteEnter: function (to, from, next) {\r\n        //stub\r\n        //console.log(\"LivePage.beforeRouteEnter\");\r\n        //console.log(to);\r\n        //console.log(from);\r\n        localStorage.setItem(\"LastLivePage\", JSON.stringify({\r\n            fullPath: to.fullPath,\r\n            name: to.name\r\n        }));\r\n        next();\r\n    },\r\n    mounted: function () {\r\n        //stub\r\n        //console.log(\"LivePage.mounted\");\r\n        var _this = this;\r\n        TQGlobals.init(function () {\r\n            // create connection\r\n            _this.connection.setHubUrl(_this.getHubUrl());\r\n            _this.connection.on(\"NewContent\", _this.onNewLiveContent);\r\n            _this.connection.onConnected(_this.onConnected);\r\n            _this.connection.onDisconnected(_this.onDisconnected);\r\n            _this.connection.connect();\r\n            _this.isInitialized = true;\r\n            _this.onInitialized();\r\n        });\r\n    },\r\n    activated: function () {\r\n        var _this = this;\r\n        window.addEventListener(\"scroll\", this.onScroll);\r\n        // I don't think VueRouter provides an event hook for after it restores the saved scroll position,\r\n        // so a hacky workaround seems to be adding a tiny delay after activated.  Otherwise, if we run\r\n        // the below code directly inside activated, it will always reconnect because it will always be\r\n        // scrolled to the top at this moment (before VueRouter restores the saved state)\r\n        setTimeout(function () {\r\n            if (_this.isInitialized && _this.isScrolledToTop() && !_this.connection.isConnected())\r\n                _this.connection.connect();\r\n        }, 10);\r\n    },\r\n    deactivated: function () {\r\n        window.removeEventListener(\"scroll\", this.onScroll);\r\n        if (this.isInitialized && this.connection.isConnected())\r\n            this.connection.disconnect();\r\n    },\r\n    beforeDestroy: function () {\r\n        //stub\r\n        console.log(\"LivePage.beforeDestroy()\");\r\n        // unwire event handlers\r\n        if (this.isInitialized) {\r\n            this.connection.off(\"NewContent\", this.onNewLiveContent);\r\n            this.connection.offConnected(this.onConnected);\r\n            this.connection.offDisconnected(this.onDisconnected);\r\n            if (this.connection.isConnected())\r\n                this.connection.disconnect();\r\n            this.onDestroying();\r\n        }\r\n    },\r\n    methods: {\r\n        onNewLiveContent: function (newContent) {\r\n            this.onNewContent(newContent, true);\r\n        },\r\n        onConnected: function () {\r\n            this.getLatestContent();\r\n        },\r\n        onDisconnected: function () {\r\n        },\r\n        // inherited from TqPage\r\n        onScrolled: function () {\r\n            //console.log(\"stub onScrolled\");\r\n            if (this.isInitialized == false)\r\n                return;\r\n            if (this.isScrolledToTop()) {\r\n                this.transitionName = \"slidedown\";\r\n                if (!this.connection.isConnected())\r\n                    this.connection.connect();\r\n            }\r\n            else {\r\n                this.transitionName = \"none\";\r\n                if (this.connection.isConnected())\r\n                    this.connection.disconnect();\r\n            }\r\n        },\r\n        getHubUrl: function () {\r\n            // overridden by extending components\r\n            return \"\";\r\n        },\r\n        onInitialized: function () {\r\n            // overridden by extending components\r\n        },\r\n        onDestroying: function () {\r\n            // overridden by extending components\r\n        },\r\n    }\r\n});\r\n",{"version":3,"file":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\mixins\\LivePage.ts","sourceRoot":"","sources":["c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\mixins\\LivePage.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport mixins from 'vue-typed-mixins';\r\n\r\nimport LinesAndAuctions from \"../interfaces/LinesAndAuctions\";\r\n\r\nimport TQGlobals from \"../classes/TQGlobals\";\r\nimport ConnectionWrapper from \"../classes/ConnectionWrapper\";\r\n\r\nimport TqPage from \"../mixins/TqPage\";\r\n\r\n\r\n// LivePage provides functionality for page components that need to display an overall snapshot of the recent live data feed in real-time (i.e. ChatView and AuctionHouseView)\r\n\r\nexport default mixins(TqPage).extend({\r\n\r\n    data: function () {\r\n        return {\r\n            isInitialized: false,\r\n            transitionName: \"slidedown\",\r\n            connection: new ConnectionWrapper()\r\n        };\r\n    },\r\n\r\n    beforeRouteEnter: function (to: any, from: any, next: any) {\r\n        //stub\r\n        //console.log(\"LivePage.beforeRouteEnter\");\r\n        //console.log(to);\r\n        //console.log(from);\r\n\r\n        localStorage.setItem(\"LastLivePage\", JSON.stringify({\r\n            fullPath: to.fullPath,\r\n            name: to.name\r\n        }));\r\n\r\n        next();\r\n    },\r\n\r\n    mounted: function () {\r\n        //stub\r\n        //console.log(\"LivePage.mounted\");\r\n\r\n        TQGlobals.init(() => {\r\n            // create connection\r\n            this.connection.setHubUrl(this.getHubUrl());\r\n            this.connection.on(\"NewContent\", this.onNewLiveContent);\r\n            this.connection.onConnected(this.onConnected);\r\n            this.connection.onDisconnected(this.onDisconnected);\r\n            this.connection.connect();\r\n\r\n            this.isInitialized = true;\r\n            this.onInitialized();\r\n        });\r\n    },\r\n\r\n    activated: function () {\r\n        window.addEventListener(\"scroll\", this.onScroll);\r\n\r\n        // I don't think VueRouter provides an event hook for after it restores the saved scroll position,\r\n        // so a hacky workaround seems to be adding a tiny delay after activated.  Otherwise, if we run\r\n        // the below code directly inside activated, it will always reconnect because it will always be\r\n        // scrolled to the top at this moment (before VueRouter restores the saved state)\r\n        setTimeout(() => {\r\n            if (this.isInitialized && this.isScrolledToTop() && !this.connection.isConnected())\r\n                this.connection.connect();\r\n        }, 10);\r\n    },\r\n\r\n    deactivated: function () {\r\n        window.removeEventListener(\"scroll\", this.onScroll);\r\n\r\n        if (this.isInitialized && this.connection.isConnected())\r\n            this.connection.disconnect();\r\n    },\r\n\r\n    beforeDestroy: function () {\r\n        //stub\r\n        console.log(\"LivePage.beforeDestroy()\");\r\n\r\n        // unwire event handlers\r\n        if (this.isInitialized) {\r\n            this.connection.off(\"NewContent\", this.onNewLiveContent);\r\n            this.connection.offConnected(this.onConnected);\r\n            this.connection.offDisconnected(this.onDisconnected);\r\n            if (this.connection.isConnected())\r\n                this.connection.disconnect();\r\n\r\n            this.onDestroying();\r\n        }\r\n    },\r\n\r\n    methods: {\r\n\r\n        onNewLiveContent: function (newContent: LinesAndAuctions) {\r\n            this.onNewContent(newContent, true);\r\n        },\r\n\r\n        onConnected: function () {\r\n            this.getLatestContent();\r\n        },\r\n\r\n        onDisconnected: function () {\r\n        },\r\n\r\n\r\n        // inherited from TqPage\r\n        onScrolled: function () {\r\n            //console.log(\"stub onScrolled\");\r\n\r\n            if (this.isInitialized == false)\r\n                return;\r\n\r\n            if (this.isScrolledToTop()) {\r\n                this.transitionName = \"slidedown\";\r\n\r\n                if (!this.connection.isConnected())\r\n                    this.connection.connect();\r\n            }\r\n            else {\r\n                this.transitionName = \"none\";\r\n\r\n                if (this.connection.isConnected())\r\n                    this.connection.disconnect();\r\n            }\r\n        },\r\n\r\n\r\n        getHubUrl: function () {\r\n            // overridden by extending components\r\n            return \"\";\r\n        },\r\n\r\n        onInitialized: function () {\r\n            // overridden by extending components\r\n        },\r\n\r\n        onDestroying: function () {\r\n            // overridden by extending components\r\n        },\r\n    }\r\n});\r\n"]}]}