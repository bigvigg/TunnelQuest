{"remainingRequest":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js??ref--12-2!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\AuctionHouseView.vue?vue&type=script&lang=ts&","dependencies":[{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\AuctionHouseView.vue","mtime":1548726331270},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from \"axios\";\r\nimport mixins from 'vue-typed-mixins';\r\nimport * as moment from \"moment\";\r\nimport LiveView from \"../mixins/LiveView\";\r\nimport TQGlobals from \"../classes/TQGlobals\";\r\nimport SlidingList from \"../classes/SlidingList\";\r\nimport AuctionView from \"./AuctionView.vue\";\r\nexport default mixins(LiveView).extend({\r\n    data: function () {\r\n        return {\r\n            auctions: new SlidingList(function (a, b) {\r\n                // sort ascending updatedAtString\r\n                if (a.updatedAtString < b.updatedAtString)\r\n                    return -1;\r\n                else if (a.updatedAtString > b.updatedAtString)\r\n                    return 1;\r\n                else {\r\n                    // sort ascending id\r\n                    if (a.id < b.id)\r\n                        return -1;\r\n                    else if (a.id > b.id)\r\n                        return 1;\r\n                    else\r\n                        return 0;\r\n                }\r\n            })\r\n        };\r\n    },\r\n    computed: {\r\n        recentlyUpdatedAuctions: function () {\r\n            return this.auctions.array\r\n                .filter(function (auction, index) {\r\n                return moment.duration(moment.default().diff(auction.updatedAtMoment)).asMinutes() <= 15;\r\n            })\r\n                .sort(function (a, b) {\r\n                // sort descending firstSeenDate\r\n                if (a.firstSeenDate < b.firstSeenDate)\r\n                    return 1;\r\n                else if (a.firstSeenDate > b.firstSeenDate)\r\n                    return -1;\r\n                else {\r\n                    // sort descending id\r\n                    if (a.id < b.id)\r\n                        return 1;\r\n                    else if (a.id > b.id)\r\n                        return -1;\r\n                    else\r\n                        return 0;\r\n                }\r\n            });\r\n        },\r\n        notRecentlyUpdatedAuctions: function () {\r\n            return this.auctions.array\r\n                .filter(function (auction, index) {\r\n                return moment.duration(moment.default().diff(auction.updatedAtMoment)).asMinutes() > 15;\r\n            })\r\n                .sort(function (a, b) {\r\n                // sort descending updatedAtString\r\n                if (a.updatedAtString < b.updatedAtString)\r\n                    return 1;\r\n                else if (a.updatedAtString > b.updatedAtString)\r\n                    return -1;\r\n                else {\r\n                    // sort descending id\r\n                    if (a.id < b.id)\r\n                        return 1;\r\n                    else if (a.id > b.id)\r\n                        return -1;\r\n                    else\r\n                        return 0;\r\n                }\r\n            });\r\n        }\r\n    },\r\n    methods: {\r\n        // inherited from LiveView\r\n        onInitialized: function () {\r\n            console.log(\"stub AuctionHouseView.onInitialized\");\r\n            this.auctions.maxSize = TQGlobals.settings.maxAuctions;\r\n        },\r\n        // inherited from LiveView\r\n        getLatestContent: function () {\r\n            var _this = this;\r\n            var minUpdatedAt = null;\r\n            if (this.auctions.array.length > 0) {\r\n                minUpdatedAt = new Date(this.auctions.array[this.auctions.array.length - 1].updatedAtString);\r\n                // add 1 ms so we don't always get one auction that we already know about in the results\r\n                minUpdatedAt = new Date(minUpdatedAt.getTime() + 1);\r\n            }\r\n            axios.get('/api/auctions?serverCode=' + TQGlobals.serverCode + \"&minUpdatedAt=\" + (minUpdatedAt == null ? \"\" : minUpdatedAt.toISOString()))\r\n                .then(function (response) {\r\n                var result = response.data;\r\n                _this.onNewContent(result, true);\r\n            })\r\n                .catch(function (err) {\r\n                // stub\r\n                console.log(err);\r\n            }); // end axios.get(chat_lines)\r\n        },\r\n        // inherited from LiveView\r\n        getEarlierContent: function () {\r\n            var _this = this;\r\n            var maxUpdatedAt = null;\r\n            if (this.auctions.array.length > 0) {\r\n                maxUpdatedAt = new Date(this.auctions.array[0].updatedAtString);\r\n                // subtract 1 ms so we don't always get one auction that we already know about in the results\r\n                maxUpdatedAt = new Date(maxUpdatedAt.getTime() - 1);\r\n            }\r\n            axios.get('/api/auctions?serverCode=' + TQGlobals.serverCode + \"&maxUpdatedAt=\" + (maxUpdatedAt == null ? \"\" : maxUpdatedAt.toISOString()) + \"&maxResults=\" + TQGlobals.settings.maxAuctions.toString())\r\n                .then(function (response) {\r\n                var result = response.data;\r\n                _this.onNewContent(result, false);\r\n            })\r\n                .catch(function (err) {\r\n                // stub\r\n                console.log(err);\r\n            }); // end axios.get(chat_lines)\r\n        },\r\n        // inherited from LiveView\r\n        onNewContent: function (newContent, enforceMaxSize) {\r\n            // stub\r\n            console.log(\"AuctionHouseView.onNewContent():\");\r\n            console.log(newContent);\r\n            // manually set some properties on the auction objects\r\n            for (var auctionId in newContent.auctions) {\r\n                var auction = newContent.auctions[auctionId];\r\n                auction.chatLine = newContent.lines[auction.chatLineId];\r\n                auction.updatedAtMoment = moment.utc(auction.updatedAtString).local();\r\n                auction.item = TQGlobals.items.get(auction.itemName, false); // false to prevent it from immediately making an ajax call to fetch this one item\r\n                // transfer the firstSeenMoment from the previously existing entry, if it exists\r\n                var existingEntry = this.auctions.dict[auction.id];\r\n                if (existingEntry)\r\n                    auction.firstSeenDate = existingEntry.firstSeenDate;\r\n                else\r\n                    auction.firstSeenDate = new Date();\r\n            }\r\n            // call this after the loop to fetch all items and simultaneously (because it's far more efficient than making an ajax call for every individual item)\r\n            TQGlobals.items.fetchPendingItems();\r\n            this.auctions.add(newContent.auctions, enforceMaxSize);\r\n        },\r\n        // inherited from LiveView\r\n        onDestroying: function () {\r\n            this.auctions.clear();\r\n        }\r\n    },\r\n    components: {\r\n        AuctionView: AuctionView\r\n    },\r\n});\r\n",{"version":3,"file":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\AuctionHouseView.vue.ts","sourceRoot":"","sources":["C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\AuctionHouseView.vue?vue&type=script&lang=ts&"],"names":[],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport axios from \"axios\";\nimport mixins from 'vue-typed-mixins';\nimport * as _ from \"lodash\";\nimport * as moment from \"moment\";\n\nimport Auction from \"../interfaces/Auction\";\nimport LinesAndAuctions from \"../interfaces/LinesAndAuctions\";\n\nimport LiveView from \"../mixins/LiveView\";\n\nimport TQGlobals from \"../classes/TQGlobals\";\nimport SlidingList from \"../classes/SlidingList\";\n\nimport AuctionView from \"./AuctionView.vue\";\n\n\nexport default mixins(LiveView).extend({\n\n    data: function () {\n        return {\n            auctions: new SlidingList<Auction>(function (a: Auction, b: Auction) {\n                // sort ascending updatedAtString\n                if (a.updatedAtString < b.updatedAtString)\n                    return -1;\n                else if (a.updatedAtString > b.updatedAtString)\n                    return 1;\n                else {\n                    // sort ascending id\n                    if (a.id < b.id)\n                        return -1;\n                    else if (a.id > b.id)\n                        return 1;\n                    else\n                        return 0;\n                }\n            })\n        };\n    },\n\n    computed: {\n        recentlyUpdatedAuctions: function () {\n            return this.auctions.array\n                .filter(function (auction: Auction, index: number) {\n                    return moment.duration(moment.default().diff(auction.updatedAtMoment)).asMinutes() <= 15;\n                })\n                .sort(function (a: Auction, b: Auction) {\n                    // sort descending firstSeenDate\n                    if (a.firstSeenDate < b.firstSeenDate)\n                        return 1;\n                    else if (a.firstSeenDate > b.firstSeenDate)\n                        return -1;\n                    else {\n                        // sort descending id\n                        if (a.id < b.id)\n                            return 1;\n                        else if (a.id > b.id)\n                            return -1;\n                        else\n                            return 0;\n                    }\n                });\n        },\n\n        notRecentlyUpdatedAuctions: function () {\n            return this.auctions.array\n                .filter(function (auction: Auction, index: number) {\n                    return moment.duration(moment.default().diff(auction.updatedAtMoment)).asMinutes() > 15;\n                })\n                .sort(function (a: Auction, b: Auction) {\n                    // sort descending updatedAtString\n                    if (a.updatedAtString < b.updatedAtString)\n                        return 1;\n                    else if (a.updatedAtString > b.updatedAtString)\n                        return -1;\n                    else {\n                        // sort descending id\n                        if (a.id < b.id)\n                            return 1;\n                        else if (a.id > b.id)\n                            return -1;\n                        else\n                            return 0;\n                    }\n                });\n        }\n    },\n    methods: {\n\n        // inherited from LiveView\n        onInitialized: function () {\n            console.log(\"stub AuctionHouseView.onInitialized\");\n\n            this.auctions.maxSize = TQGlobals.settings.maxAuctions;\n        },\n\n        // inherited from LiveView\n        getLatestContent: function () {\n            let minUpdatedAt: Date | null = null;\n            if (this.auctions.array.length > 0) {\n                minUpdatedAt = new Date(this.auctions.array[this.auctions.array.length - 1].updatedAtString);\n\n                // add 1 ms so we don't always get one auction that we already know about in the results\n                minUpdatedAt = new Date(minUpdatedAt.getTime() + 1);\n            }\n\n            axios.get('/api/auctions?serverCode=' + TQGlobals.serverCode + \"&minUpdatedAt=\" + (minUpdatedAt == null ? \"\" : minUpdatedAt.toISOString()))\n                .then(response => {\n                    let result = response.data as LinesAndAuctions;\n                    this.onNewContent(result, true);\n                })\n                .catch(err => {\n                    // stub\n                    console.log(err);\n                }); // end axios.get(chat_lines)\n        },\n\n        // inherited from LiveView\n        getEarlierContent: function () {\n\n            let maxUpdatedAt: Date | null = null;\n            if (this.auctions.array.length > 0) {\n                maxUpdatedAt = new Date(this.auctions.array[0].updatedAtString);\n\n                // subtract 1 ms so we don't always get one auction that we already know about in the results\n                maxUpdatedAt = new Date(maxUpdatedAt.getTime() - 1);\n            }\n\n            axios.get('/api/auctions?serverCode=' + TQGlobals.serverCode + \"&maxUpdatedAt=\" + (maxUpdatedAt == null ? \"\" : maxUpdatedAt.toISOString()) + \"&maxResults=\" + TQGlobals.settings.maxAuctions.toString())\n                .then(response => {\n                    let result = response.data as LinesAndAuctions;\n                    this.onNewContent(result, false);\n                })\n                .catch(err => {\n                    // stub\n                    console.log(err);\n                }); // end axios.get(chat_lines)\n        },\n\n        // inherited from LiveView\n        onNewContent: function (newContent: LinesAndAuctions, enforceMaxSize: boolean) {\n            // stub\n            console.log(\"AuctionHouseView.onNewContent():\");\n            console.log(newContent);\n\n            // manually set some properties on the auction objects\n\n            for (let auctionId in newContent.auctions) {\n                let auction = newContent.auctions[auctionId];\n                auction.chatLine = newContent.lines[auction.chatLineId];\n                auction.updatedAtMoment = moment.utc(auction.updatedAtString).local();\n                auction.item = TQGlobals.items.get(auction.itemName, false); // false to prevent it from immediately making an ajax call to fetch this one item\n\n                // transfer the firstSeenMoment from the previously existing entry, if it exists\n                let existingEntry = this.auctions.dict[auction.id];\n                if (existingEntry)\n                    auction.firstSeenDate = existingEntry.firstSeenDate;\n                else\n                    auction.firstSeenDate = new Date();\n            }\n\n            // call this after the loop to fetch all items and simultaneously (because it's far more efficient than making an ajax call for every individual item)\n            TQGlobals.items.fetchPendingItems();\n\n            this.auctions.add(newContent.auctions, enforceMaxSize);\n        },\n\n        // inherited from LiveView\n        onDestroying: function () {\n            this.auctions.clear();\n        }\n    },\n    components: {\n        AuctionView\n    },\n});\n"]}]}