{"remainingRequest":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\thread-loader\\dist\\cjs.js!c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js??ref--12-2!c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\classes\\ConnectionWrapper.ts","dependencies":[{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\classes\\ConnectionWrapper.ts","mtime":1549772265896},{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import * as signalR from \"@aspnet/signalr\";\r\n// ConnectionWrapper is a simple wrapper for a signalR connection that provides additional \r\n// functionality and safety checks.\r\nvar ConnectionWrapper = /** @class */ (function () {\r\n    function ConnectionWrapper() {\r\n        this.isConnecting = false;\r\n        this.connection = null;\r\n        this.onConnectedCallbacks = new Array();\r\n        this.onDisconnectedCallbacks = new Array();\r\n    }\r\n    ConnectionWrapper.prototype.setHubUrl = function (hubUrl) {\r\n        this.connection = new signalR.HubConnectionBuilder()\r\n            .withUrl(hubUrl)\r\n            .build();\r\n    };\r\n    ConnectionWrapper.prototype.isConnected = function () {\r\n        return (this.isConnecting || this.connection == null || this.connection.state == signalR.HubConnectionState.Connected);\r\n    };\r\n    ConnectionWrapper.prototype.on = function (serverMessage, callback) {\r\n        if (this.connection == null)\r\n            throw new Error(\"must call ConnectionWrapper.setHubUrl() first\");\r\n        this.connection.on(serverMessage, callback);\r\n    };\r\n    ConnectionWrapper.prototype.off = function (serverMessage, callback) {\r\n        if (this.connection == null)\r\n            throw new Error(\"must call ConnectionWrapper.setHubUrl() first\");\r\n        this.connection.off(serverMessage, callback);\r\n    };\r\n    ConnectionWrapper.prototype.onConnected = function (callback) {\r\n        if (this.onConnectedCallbacks.indexOf(callback) < 0)\r\n            this.onConnectedCallbacks.push(callback);\r\n    };\r\n    ConnectionWrapper.prototype.offConnected = function (callback) {\r\n        var index = this.onConnectedCallbacks.indexOf(callback);\r\n        if (index >= 0)\r\n            this.onConnectedCallbacks.splice(index, 1);\r\n    };\r\n    ConnectionWrapper.prototype.onDisconnected = function (callback) {\r\n        if (this.onDisconnectedCallbacks.indexOf(callback) < 0)\r\n            this.onDisconnectedCallbacks.push(callback);\r\n    };\r\n    ConnectionWrapper.prototype.offDisconnected = function (callback) {\r\n        var index = this.onDisconnectedCallbacks.indexOf(callback);\r\n        if (index >= 0)\r\n            this.onDisconnectedCallbacks.splice(index, 1);\r\n    };\r\n    ConnectionWrapper.prototype.connect = function () {\r\n        var _this = this;\r\n        if (this.connection == null)\r\n            throw new Error(\"must call ConnectionWrapper.setHubUrl() first\");\r\n        if (this.isConnected())\r\n            return; // already connected\r\n        this.isConnecting = true;\r\n        // stub\r\n        console.log(\"connecting\");\r\n        this.connection\r\n            .start()\r\n            .then(function () {\r\n            // stub\r\n            console.log(\"connected\");\r\n            for (var _i = 0, _a = _this.onConnectedCallbacks; _i < _a.length; _i++) {\r\n                var callback = _a[_i];\r\n                callback();\r\n            }\r\n            _this.isConnecting = false;\r\n        })\r\n            .catch(function (err) {\r\n            // stub\r\n            console.log(err);\r\n            _this.isConnecting = false;\r\n        });\r\n    };\r\n    ConnectionWrapper.prototype.disconnect = function () {\r\n        var _this = this;\r\n        if (this.connection == null)\r\n            throw new Error(\"must call ConnectionWrapper.setHubUrl() first\");\r\n        if (!this.isConnected())\r\n            return; // already disconnected\r\n        // stub\r\n        console.log(\"disconnecting\");\r\n        this.connection\r\n            .stop()\r\n            .then(function () {\r\n            // stub\r\n            console.log(\"disconnected\");\r\n            for (var _i = 0, _a = _this.onDisconnectedCallbacks; _i < _a.length; _i++) {\r\n                var callback = _a[_i];\r\n                callback();\r\n            }\r\n        })\r\n            .catch(function (err) {\r\n            // stub\r\n            console.log(err);\r\n        });\r\n    };\r\n    return ConnectionWrapper;\r\n}());\r\nexport default ConnectionWrapper;\r\n",{"version":3,"file":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\classes\\ConnectionWrapper.ts","sourceRoot":"","sources":["c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\classes\\ConnectionWrapper.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport * as signalR from \"@aspnet/signalr\";\r\n\r\n// ConnectionWrapper is a simple wrapper for a signalR connection that provides additional \r\n// functionality and safety checks.\r\n\r\nclass ConnectionWrapper {\r\n    \r\n    private connection: signalR.HubConnection | null;\r\n    private isConnecting: boolean = false;\r\n    private onConnectedCallbacks: Array<Function>;\r\n    private onDisconnectedCallbacks: Array<Function>;\r\n\r\n    constructor() {\r\n        this.connection = null;\r\n        this.onConnectedCallbacks = new Array<Function>();\r\n        this.onDisconnectedCallbacks = new Array<Function>();\r\n    }\r\n\r\n    public setHubUrl(hubUrl: string) {\r\n        this.connection = new signalR.HubConnectionBuilder()\r\n            .withUrl(hubUrl)\r\n            .build();\r\n    }\r\n\r\n    public isConnected() {\r\n        return (this.isConnecting || this.connection == null || this.connection.state == signalR.HubConnectionState.Connected);\r\n    }\r\n\r\n\r\n\r\n    public on(serverMessage: string, callback: (...args: any[]) => void) {\r\n        if (this.connection == null)\r\n            throw new Error(\"must call ConnectionWrapper.setHubUrl() first\");\r\n\r\n        this.connection.on(serverMessage, callback);\r\n    }\r\n\r\n    public off(serverMessage: string, callback: (...args: any[]) => void) {\r\n        if (this.connection == null)\r\n            throw new Error(\"must call ConnectionWrapper.setHubUrl() first\");\r\n\r\n        this.connection.off(serverMessage, callback);\r\n    }\r\n\r\n\r\n\r\n    public onConnected(callback: Function) {\r\n        if (this.onConnectedCallbacks.indexOf(callback) < 0)\r\n            this.onConnectedCallbacks.push(callback);\r\n    }\r\n\r\n    public offConnected(callback: Function) {\r\n        let index = this.onConnectedCallbacks.indexOf(callback);\r\n        if (index >= 0)\r\n            this.onConnectedCallbacks.splice(index, 1);\r\n    }\r\n\r\n\r\n\r\n    public onDisconnected(callback: Function) {\r\n        if (this.onDisconnectedCallbacks.indexOf(callback) < 0)\r\n            this.onDisconnectedCallbacks.push(callback);\r\n    }\r\n\r\n    public offDisconnected(callback: Function) {\r\n        let index = this.onDisconnectedCallbacks.indexOf(callback);\r\n        if (index >= 0)\r\n            this.onDisconnectedCallbacks.splice(index, 1);\r\n    }\r\n\r\n\r\n\r\n    public connect() {\r\n        if (this.connection == null)\r\n            throw new Error(\"must call ConnectionWrapper.setHubUrl() first\");\r\n\r\n        if (this.isConnected())\r\n            return; // already connected\r\n\r\n        this.isConnecting = true;\r\n\r\n        // stub\r\n        console.log(\"connecting\");\r\n\r\n        this.connection\r\n            .start()\r\n            .then(() => {\r\n                // stub\r\n                console.log(\"connected\");\r\n\r\n                for (var callback of this.onConnectedCallbacks) {\r\n                    callback();\r\n                }\r\n\r\n                this.isConnecting = false;\r\n            })\r\n            .catch(err => {\r\n                // stub\r\n                console.log(err);\r\n                this.isConnecting = false;\r\n            });\r\n    }\r\n\r\n    public disconnect() {\r\n        if (this.connection == null)\r\n            throw new Error(\"must call ConnectionWrapper.setHubUrl() first\");\r\n\r\n        if (!this.isConnected())\r\n            return; // already disconnected\r\n\r\n        // stub\r\n        console.log(\"disconnecting\");\r\n\r\n        this.connection\r\n            .stop()\r\n            .then(() => {\r\n                // stub\r\n                console.log(\"disconnected\");\r\n\r\n                for (var callback of this.onDisconnectedCallbacks) {\r\n                    callback();\r\n                }\r\n            })\r\n            .catch(err => {\r\n                // stub\r\n                console.log(err);\r\n            });\r\n    }\r\n}\r\n\r\nexport default ConnectionWrapper;"]}]}