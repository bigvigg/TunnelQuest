{"remainingRequest":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\thread-loader\\dist\\cjs.js!c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js??ref--12-2!c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\ItemPage.vue?vue&type=script&lang=ts&","dependencies":[{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\ItemPage.vue","mtime":1553137339326},{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js","mtime":1545640398000},{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from \"axios\";\r\nimport mixins from 'vue-typed-mixins';\r\nimport TQGlobals from \"../classes/TQGlobals\";\r\nimport SlidingList from \"../classes/SlidingList\";\r\nimport TqPage from \"../mixins/TqPage\";\r\nimport SiteHeader from \"./SiteHeader.vue\";\r\nimport ItemView from \"./ItemView.vue\";\r\nimport PriceHistoryView from \"./PriceHistoryView.vue\";\r\nimport ItemAuctionView from \"./ItemAuctionView.vue\";\r\nexport default mixins(TqPage).extend({\r\n    name: \"ItemPage\",\r\n    data: function () {\r\n        return {\r\n            // STUB hard-coded\r\n            serverCode: \"BLUE\",\r\n            item: null,\r\n            auctions: new SlidingList(function (a, b) {\r\n                // sort descending updatedAtString\r\n                if (a.updatedAtString < b.updatedAtString)\r\n                    return 1;\r\n                else if (a.updatedAtString > b.updatedAtString)\r\n                    return -1;\r\n                else {\r\n                    // sort descending id\r\n                    if (a.id < b.id)\r\n                        return 1;\r\n                    else if (a.id > b.id)\r\n                        return -1;\r\n                    else\r\n                        return 0;\r\n                }\r\n            })\r\n        };\r\n    },\r\n    mounted: function () {\r\n        var _this = this;\r\n        window.addEventListener(\"scroll\", this.onScroll);\r\n        TQGlobals.init(function () {\r\n            var aliasedItemName = TQGlobals.resolveItemAlias(_this.$route.params.itemName);\r\n            if (aliasedItemName != _this.$route.params.itemName) {\r\n                _this.$router.replace(\"/item/\" + encodeURIComponent(aliasedItemName));\r\n            }\r\n            else {\r\n                _this.item = TQGlobals.items.get(_this.$route.params.itemName);\r\n                _this.getLatestContent();\r\n            }\r\n        });\r\n    },\r\n    watch: {\r\n        // so that we can navigate from one item page to another, and everything will update\r\n        $route: function (to, from) {\r\n            this.item = TQGlobals.items.get(this.$route.params.itemName);\r\n            this.getLatestContent();\r\n        }\r\n    },\r\n    beforeDestroy: function () {\r\n        window.removeEventListener(\"scroll\", this.onScroll);\r\n    },\r\n    methods: {\r\n        // inherited from TqPage\r\n        getLatestContent: function () {\r\n            var _this = this;\r\n            this.auctions.clear();\r\n            axios.post('/api/auction_query', {\r\n                serverCode: this.serverCode,\r\n                itemName: this.$route.params.itemName,\r\n                includeChatLine: true\r\n            })\r\n                .then(function (response) {\r\n                var itemAuctions = response.data;\r\n                _this.onNewContent(itemAuctions, true);\r\n            })\r\n                .catch(function (err) {\r\n                // stub\r\n                console.log(err);\r\n            });\r\n        },\r\n        // inherited from TqPage\r\n        getEarlierContent: function () {\r\n            var _this = this;\r\n            var maxId = null;\r\n            if (this.auctions.array.length > 0)\r\n                maxId = this.auctions.array[this.auctions.array.length - 1].id - 1;\r\n            axios.post('/api/auction_query', {\r\n                serverCode: this.serverCode,\r\n                itemName: this.$route.params.itemName,\r\n                maximumId: maxId,\r\n                includeChatLine: true\r\n            })\r\n                .then(function (response) {\r\n                var itemAuctions = response.data;\r\n                _this.onNewContent(itemAuctions, false);\r\n            })\r\n                .catch(function (err) {\r\n                // stub\r\n                console.log(err);\r\n            });\r\n        },\r\n        // inherited from TqPage\r\n        onFilteredContent: function (itemAuctions, enforceMaxSize) {\r\n            for (var auctionId in itemAuctions.auctions) {\r\n                var auction = itemAuctions.auctions[auctionId];\r\n                this.auctions.add(auction);\r\n            }\r\n            if (enforceMaxSize)\r\n                this.auctions.enforceMaxSize();\r\n            this.auctions.sort();\r\n        }\r\n    },\r\n    components: {\r\n        SiteHeader: SiteHeader,\r\n        ItemView: ItemView,\r\n        PriceHistoryView: PriceHistoryView,\r\n        ItemAuctionView: ItemAuctionView\r\n    },\r\n});\r\n",{"version":3,"file":"c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\ItemPage.vue.ts","sourceRoot":"","sources":["c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!c:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\components\\ItemPage.vue?vue&type=script&lang=ts&"],"names":[],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport axios from \"axios\";\nimport mixins from 'vue-typed-mixins';\n\nimport Item from '../interfaces/Item';\nimport Auction from '../interfaces/Auction';\nimport LinesAndAuctions from \"../interfaces/LinesAndAuctions\";\n\nimport TQGlobals from \"../classes/TQGlobals\";\nimport SlidingList from \"../classes/SlidingList\";\n\nimport TqPage from \"../mixins/TqPage\";\n\nimport SiteHeader from \"./SiteHeader.vue\";\nimport ItemView from \"./ItemView.vue\";\nimport PriceHistoryView from \"./PriceHistoryView.vue\";\nimport ItemAuctionView from \"./ItemAuctionView.vue\";\n\n\nexport default mixins(TqPage).extend({\n\n    name: \"ItemPage\",\n\n    data: function () {\n        return {\n            // STUB hard-coded\n            serverCode: \"BLUE\",\n\n            item: null as Item | null,\n\n            auctions: new SlidingList<Auction>(function (a: Auction, b: Auction) {\n                // sort descending updatedAtString\n                if (a.updatedAtString < b.updatedAtString)\n                    return 1;\n                else if (a.updatedAtString > b.updatedAtString)\n                    return -1;\n                else {\n                    // sort descending id\n                    if (a.id < b.id)\n                        return 1;\n                    else if (a.id > b.id)\n                        return -1;\n                    else\n                        return 0;\n                }\n            })\n        };\n    },\n\n    mounted: function () {\n        window.addEventListener(\"scroll\", this.onScroll);\n\n        TQGlobals.init(() => {\n            let aliasedItemName = TQGlobals.resolveItemAlias(this.$route.params.itemName);\n            if (aliasedItemName != this.$route.params.itemName) {\n                this.$router.replace(\"/item/\" + encodeURIComponent(aliasedItemName));\n            }\n            else {\n                this.item = TQGlobals.items.get(this.$route.params.itemName);\n                this.getLatestContent();\n            }\n        });\n    },\n\n    watch: {\n        // so that we can navigate from one item page to another, and everything will update\n        $route (to, from) {\n            this.item = TQGlobals.items.get(this.$route.params.itemName);\n            this.getLatestContent();\n        }\n    },\n\n    beforeDestroy: function () {\n        window.removeEventListener(\"scroll\", this.onScroll);\n    },\n\n    methods: {\n        // inherited from TqPage\n        getLatestContent: function () {\n            this.auctions.clear();\n\n            axios.post('/api/auction_query', {\n                serverCode: this.serverCode,\n                itemName: this.$route.params.itemName,\n                includeChatLine: true\n            })\n            .then(response => {\n                let itemAuctions = response.data as LinesAndAuctions;\n                this.onNewContent(itemAuctions, true);\n            })\n            .catch(err => {\n                // stub\n                console.log(err);\n            });\n        },\n\n        // inherited from TqPage\n        getEarlierContent: function () {\n            let maxId: number | null = null;\n            if (this.auctions.array.length > 0)\n                maxId = this.auctions.array[this.auctions.array.length - 1].id - 1;\n\n            axios.post('/api/auction_query', {\n                serverCode: this.serverCode,\n                itemName: this.$route.params.itemName,\n                maximumId: maxId,\n                includeChatLine: true\n            })\n            .then(response => {\n                let itemAuctions = response.data as LinesAndAuctions;\n                this.onNewContent(itemAuctions, false);\n            })\n            .catch(err => {\n                // stub\n                console.log(err);\n            });\n        },\n\n\n        // inherited from TqPage\n        onFilteredContent: function (itemAuctions: LinesAndAuctions, enforceMaxSize: boolean) {\n            for (let auctionId in itemAuctions.auctions) {\n                let auction = itemAuctions.auctions[auctionId];\n                this.auctions.add(auction);\n            }\n\n            if (enforceMaxSize)\n                this.auctions.enforceMaxSize();\n\n            this.auctions.sort();\n        }\n    },\n\n    components: {\n        SiteHeader,\n        ItemView,\n        PriceHistoryView,\n        ItemAuctionView\n    },\n});\n"]}]}