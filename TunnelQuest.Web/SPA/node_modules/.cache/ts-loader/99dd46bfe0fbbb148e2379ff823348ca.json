{"remainingRequest":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js??ref--12-2!C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\mixins\\LiveView.ts","dependencies":[{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\mixins\\LiveView.ts","mtime":1548213560305},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\node_modules\\ts-loader\\index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import Vue from \"vue\";\r\nimport TQGlobals from \"../classes/TQGlobals\";\r\n// LiveView provides functionality for components that need to display an overall snapshot of the recent live data feed in real-time (i.e. ChatView and AuctionHouseView)\r\nexport default Vue.extend({\r\n    data: function () {\r\n        return {\r\n            transitionName: \"slidedown\"\r\n        };\r\n    },\r\n    mounted: function () {\r\n        TQGlobals.onInit(this.onInit);\r\n    },\r\n    activated: function () {\r\n        console.log(\"stub activated\");\r\n        window.addEventListener(\"scroll\", this.onScroll);\r\n        // force scroll to top, if not already scrolled to top\r\n        if (document != null && document.documentElement != null && document.documentElement.scrollTop != 0)\r\n            window.scrollTo(0, 0);\r\n    },\r\n    deactivated: function () {\r\n        console.log(\"stub deactivated\");\r\n        window.removeEventListener(\"scroll\", this.onScroll);\r\n    },\r\n    beforeDestroy: function () {\r\n        // unwire event handlers\r\n        TQGlobals.connection.off(\"NewChatLines\", this.onNewChatLines);\r\n        TQGlobals.connection.offConnected(this.onConnected);\r\n        TQGlobals.connection.offDisconnected(this.onDisconnected);\r\n        this.onDestroying();\r\n    },\r\n    methods: {\r\n        onInit: function () {\r\n            // wire event handlers\r\n            TQGlobals.connection.on(\"NewChatLines\", this.onNewChatLines);\r\n            TQGlobals.connection.onConnected(this.onConnected);\r\n            TQGlobals.connection.onDisconnected(this.onDisconnected);\r\n            // pull the initial data\r\n            if (TQGlobals.connection.isConnected())\r\n                this.getLatestContent();\r\n            else\r\n                TQGlobals.connection.connect();\r\n            this.onInitialized();\r\n        },\r\n        onNewChatLines: function (newContent) {\r\n            this.onNewContent(newContent, true);\r\n        },\r\n        onConnected: function () {\r\n            this.getLatestContent();\r\n        },\r\n        onDisconnected: function () {\r\n        },\r\n        onScroll: function () {\r\n            //console.log(\"stub onScroll\");\r\n            if (document == null || document.documentElement == null)\r\n                return;\r\n            var isScrolledToTop = (document.documentElement.scrollTop == 0);\r\n            var isScrolledToBottom = (Math.ceil(document.documentElement.scrollTop) + window.innerHeight >= document.documentElement.scrollHeight);\r\n            //console.log(\"scrollTop \" + document.documentElement.scrollTop.toString() + \" innerHeight \" + window.innerHeight.toString() + \" scrollheight \" + document.documentElement.scrollHeight.toString());\r\n            if (isScrolledToTop) {\r\n                this.transitionName = \"slidedown\";\r\n                if (!TQGlobals.connection.isConnected())\r\n                    TQGlobals.connection.connect();\r\n            }\r\n            else {\r\n                this.transitionName = \"none\";\r\n                if (TQGlobals.connection.isConnected())\r\n                    TQGlobals.connection.disconnect();\r\n                if (isScrolledToBottom)\r\n                    this.getEarlierContent();\r\n            }\r\n        },\r\n        onInitialized: function () {\r\n            // overridden by extending components\r\n        },\r\n        getLatestContent: function () {\r\n            // overridden by extending components\r\n        },\r\n        getEarlierContent: function () {\r\n            // overridden by extending components\r\n        },\r\n        onNewContent: function (newContent, enforceMaxSize) {\r\n            // overridden by extending components\r\n        },\r\n        onDestroying: function () {\r\n            // overridden by extending components\r\n        },\r\n    }\r\n});\r\n",{"version":3,"file":"C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\mixins\\LiveView.ts","sourceRoot":"","sources":["C:\\Users\\joe\\source\\repos\\TunnelQuest\\TunnelQuest.Web\\SPA\\src\\mixins\\LiveView.ts"],"names":[],"mappings":"AACA,OAAO,GAAG,MAAM,KAAK,CAAC;AAKtB,OAAO,SAAS,MAAM,sBAAsB,CAAC;AAG7C,yKAAyK;AAEzK,eAAe,GAAG,CAAC,MAAM,CAAC;IAEtB,IAAI,EAAE;QACF,OAAO;YACH,cAAc,EAAE,WAAW;SAC9B,CAAC;IACN,CAAC;IAED,OAAO,EAAE;QACL,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAED,SAAS,EAAE;QACP,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAC9B,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEjD,sDAAsD;QACtD,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,eAAe,IAAI,IAAI,IAAI,QAAQ,CAAC,eAAe,CAAC,SAAS,IAAI,CAAC;YAC/F,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9B,CAAC;IAED,WAAW,EAAE;QACT,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QAChC,MAAM,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACxD,CAAC;IAED,aAAa,EAAE;QACX,wBAAwB;QACxB,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QAC9D,SAAS,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACpD,SAAS,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAE1D,IAAI,CAAC,YAAY,EAAE,CAAC;IACxB,CAAC;IAED,OAAO,EAAE;QAEL,MAAM,EAAE;YACJ,sBAAsB;YACtB,SAAS,CAAC,UAAU,CAAC,EAAE,CAAC,cAAc,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;YAC7D,SAAS,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACnD,SAAS,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAEzD,wBAAwB;YACxB,IAAI,SAAS,CAAC,UAAU,CAAC,WAAW,EAAE;gBAClC,IAAI,CAAC,gBAAgB,EAAE,CAAC;;gBAExB,SAAS,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;YAEnC,IAAI,CAAC,aAAa,EAAE,CAAC;QACzB,CAAC;QAED,cAAc,EAAE,UAAU,UAA4B;YAClD,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QACxC,CAAC;QAED,WAAW,EAAE;YACT,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC5B,CAAC;QAED,cAAc,EAAE;QAChB,CAAC;QAED,QAAQ,EAAE;YACN,+BAA+B;YAE/B,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,CAAC,eAAe,IAAI,IAAI;gBACpD,OAAO;YAEX,IAAI,eAAe,GAAG,CAAC,QAAQ,CAAC,eAAe,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC;YAChE,IAAI,kBAAkB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC,WAAW,IAAI,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;YAEvI,oMAAoM;YAEpM,IAAI,eAAe,EAAE;gBACjB,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC;gBAElC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,EAAE;oBACnC,SAAS,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;aACtC;iBACI;gBACD,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC;gBAE7B,IAAI,SAAS,CAAC,UAAU,CAAC,WAAW,EAAE;oBAClC,SAAS,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;gBAEtC,IAAI,kBAAkB;oBAClB,IAAI,CAAC,iBAAiB,EAAE,CAAC;aAChC;QACL,CAAC;QAED,aAAa,EAAE;YACX,qCAAqC;QACzC,CAAC;QAED,gBAAgB,EAAE;YACd,qCAAqC;QACzC,CAAC;QAED,iBAAiB,EAAE;YACf,qCAAqC;QACzC,CAAC;QAED,YAAY,EAAE,UAAU,UAA4B,EAAE,cAAuB;YACzE,qCAAqC;QACzC,CAAC;QAED,YAAY,EAAE;YACV,qCAAqC;QACzC,CAAC;KACJ;CACJ,CAAC,CAAC","sourcesContent":["\r\nimport Vue from \"vue\";\r\n\r\nimport Auction from \"../interfaces/Auction\";\r\nimport LinesAndAuctions from \"../interfaces/LinesAndAuctions\";\r\n\r\nimport TQGlobals from \"../classes/TQGlobals\";\r\n\r\n\r\n// LiveView provides functionality for components that need to display an overall snapshot of the recent live data feed in real-time (i.e. ChatView and AuctionHouseView)\r\n\r\nexport default Vue.extend({\r\n\r\n    data: function () {\r\n        return {\r\n            transitionName: \"slidedown\"\r\n        };\r\n    },\r\n\r\n    mounted: function () {\r\n        TQGlobals.onInit(this.onInit);\r\n    },\r\n\r\n    activated: function () {\r\n        console.log(\"stub activated\");\r\n        window.addEventListener(\"scroll\", this.onScroll);\r\n        \r\n        // force scroll to top, if not already scrolled to top\r\n        if (document != null && document.documentElement != null && document.documentElement.scrollTop != 0)\r\n            window.scrollTo(0, 0);\r\n    },\r\n\r\n    deactivated: function () {\r\n        console.log(\"stub deactivated\");\r\n        window.removeEventListener(\"scroll\", this.onScroll);\r\n    },\r\n\r\n    beforeDestroy: function () {\r\n        // unwire event handlers\r\n        TQGlobals.connection.off(\"NewChatLines\", this.onNewChatLines);\r\n        TQGlobals.connection.offConnected(this.onConnected);\r\n        TQGlobals.connection.offDisconnected(this.onDisconnected);\r\n\r\n        this.onDestroying();\r\n    },\r\n\r\n    methods: {\r\n\r\n        onInit: function () {\r\n            // wire event handlers\r\n            TQGlobals.connection.on(\"NewChatLines\", this.onNewChatLines);\r\n            TQGlobals.connection.onConnected(this.onConnected);\r\n            TQGlobals.connection.onDisconnected(this.onDisconnected);\r\n\r\n            // pull the initial data\r\n            if (TQGlobals.connection.isConnected())\r\n                this.getLatestContent();\r\n            else\r\n                TQGlobals.connection.connect();\r\n\r\n            this.onInitialized();\r\n        },\r\n\r\n        onNewChatLines: function (newContent: LinesAndAuctions) {\r\n            this.onNewContent(newContent, true);\r\n        },\r\n\r\n        onConnected: function () {\r\n            this.getLatestContent();\r\n        },\r\n\r\n        onDisconnected: function () {\r\n        },\r\n\r\n        onScroll: function () {\r\n            //console.log(\"stub onScroll\");\r\n\r\n            if (document == null || document.documentElement == null)\r\n                return;\r\n\r\n            let isScrolledToTop = (document.documentElement.scrollTop == 0);\r\n            let isScrolledToBottom = (Math.ceil(document.documentElement.scrollTop) + window.innerHeight >= document.documentElement.scrollHeight);\r\n\r\n            //console.log(\"scrollTop \" + document.documentElement.scrollTop.toString() + \" innerHeight \" + window.innerHeight.toString() + \" scrollheight \" + document.documentElement.scrollHeight.toString());\r\n\r\n            if (isScrolledToTop) {\r\n                this.transitionName = \"slidedown\";\r\n\r\n                if (!TQGlobals.connection.isConnected())\r\n                    TQGlobals.connection.connect();\r\n            }\r\n            else {\r\n                this.transitionName = \"none\";\r\n\r\n                if (TQGlobals.connection.isConnected())\r\n                    TQGlobals.connection.disconnect();\r\n\r\n                if (isScrolledToBottom)\r\n                    this.getEarlierContent();\r\n            }\r\n        },\r\n        \r\n        onInitialized: function () {\r\n            // overridden by extending components\r\n        },\r\n\r\n        getLatestContent: function () {\r\n            // overridden by extending components\r\n        },\r\n\r\n        getEarlierContent: function () {\r\n            // overridden by extending components\r\n        },\r\n\r\n        onNewContent: function (newContent: LinesAndAuctions, enforceMaxSize: boolean) {\r\n            // overridden by extending components\r\n        },\r\n\r\n        onDestroying: function () {\r\n            // overridden by extending components\r\n        },\r\n    }\r\n});\r\n"]}]}