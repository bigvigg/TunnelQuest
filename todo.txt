
- TunnelQuestWatcher
	- have it hit a "heartbeat" api endpoint every 5 minutes to let the server know it's still running, just quiet
	- display the # of bots currently feeding it
	- don't let it start sending lines until it sees "You have entered East Commonlands.".  the user might
	  have to camp or zone if they don't start the scraper until after they're already in ec.  make that super
	  clear to the user.  this is to prevent "accidents" of ppl scraping auctions from other zones 
		- but is that a problem?
			- it'll be a problem if we ever want to validate submitted data.. best to just do it this way to be safe

- make sure web app accepts unsafe characters (test this)

- aside from showing # of tunnelwatchers, show # of ppl on the hub too
	- remember there are separate hubs for chat and auction

- how AuthTokens will work:
	- all tokens are generated by the client, based on the cpu id.  user never sees the word "token" or sees the value itself.

	- user only sees a panel with either "'name' Authorized", "Politely Declined", or a box "who are you?" and a button "Request Access"

		- when app starts, it will make a call to an api endpoint "/user" with the bearer token header, which will return a response of either:
			- 401(?) Unauthorized, which means user never clicked request
			- 200 OK status containing { name: submitted_name, status: pending,approved,declined }

		- the "start logging" button will be disabled until "Authorized"

	- (client will also have a small "settings" menu with a box for the api url, saved as a persistent user config setting)


- add new nullable string column MessageToUser in auth_tokens

- replace the default vue favicon.ico
		
- figure out why "WTS aaa [link]" isn't interpreting aaa as descriptive text, and is creating an auction for it instead (ParsedChatLine.cs line 142)

- make it auto-retry connect on failure (try all kinds of failure)

- stickyheader disco message fade transition not working?

- horizontal scrollbar in smallest width (because of the auction padding?)

- test to make sure people can't mess up the page by typing a really long string or something

- build in client-side check to remember the last downward scroll params, and not to repeat the same downward scroll query twice in a row

- alternating background colors on auction page, and color the text different for wtb maybe?  point is, alternating background colors

- spaces in beginning of line get interpreted as auctions
	- make sure no auction is ever created for whitespace
	
- spend the time to make the "<<" top menu buttons do a javascript:back() when appropriate

- timestamp not positioned all the way to right in newspaper auctions

- create new migration for initial eq log files
	- actually use timestamp for these

- special ChatPurge marker in the chat ui to make it clear to users at what point the spam got trimmed

- i think Auction House view is getting the chat lines even though it doesn't use them
	- refactor so that there's one hub per server, and each hub uses groups to determine which payload to send
		- "ChatGroup", "AuctionGroup", "ChatAndAuctionGroup"
		- https://docs.microsoft.com/en-us/aspnet/core/signalr/hubs?view=aspnetcore-2.2
		- https://docs.microsoft.com/en-us/aspnet/core/signalr/javascript-client?view=aspnetcore-2.2
	- make client invoke a method on the hub to join one of the groups immediately after connect
		* also after reconnect
	** ALSO refactor so that the controller reuses the ClientChatLine and ClientAuction objects as much as possible

- cache static copy of all Item and Spell data (and all static data for that matter) since none of it will ever change; no reason to query over and over

- create item_alias table to manually associate common player-typed unknown item names with known item names (i.e. "jboots mq" might be an alias for "Journeyman's Boots" strong name)
	- Alias (PK because logically it can only be an alias for ONE thing)
	- ItemName (not FK because might be another weak name)

	*** MAKE IT SO THAT weak names can alias a parent weak name too, for commonly sold items with no decent item to link (i.e. ports maybe?  something, surely)

	- links to an item's alias automatically load (location.replace()) the strongly typed name instead
		** WAIT: if the api method automatically returns the parent, then no need to redirect; just make sure all code
		   uses item.itemName instead of the one passed in the querystring parameter (except for the api call to /item, which does the alias resolution)

	- aliases are displayed on an item's page
	- GetAuctions(by itemName) will also pulls auctions for any associated alias, including if for some reason you passed in the child alias instead of the parent alias
	- item filters will be aware of aliases and let aliased rows through the filter
	- PriceHistory endpoint will also automatically resolve to parent alias
	
	?? maybe other api endpoints that need to automatically return data for the parent alias??

	** with the setup above, I don't **think** there's any reason for the javascript code to be aware of aliases at all


- show price history on item page

- make item page scroll infinitely to show past auctions

- make PriceService's worker thread a LowPriority thread

- for pc users, hover over PriceDeviationViews to see full info; hover over item names to see item view

- SettingsPage
	- "Item Filters"
		* there's no way to filter hub transmissions on an individual connection level, so unfortunately the filtering logic will
		  HAVE TO BE CODED SEPARATELY IN BOTH CLIENT AND SERVER.
			- server to filter the api call results; otherwise a client could get stuck if a call ever returns a max results set with no matching items (also hugely wasteful)
			- client to filter the live feed content (unfortunately no way to prevent the waste here since can't filter an individual connection's content on server)

			!! FILTER IDEA: 

				- basically wrap every AuctionView and ChatLineView in a v-if="passesFilter(item|auction)", that way vue will automatically
				  handle the unhiding after all the data comes in from ajax
					* this way we can also filter on metadata, i.e. only show lines|auctions with a good value above 100

				- will need to make sure there the entire global filter object structure exists in its entirety before anything is mounted,
				  just like how vue won't update if you don't have all the properties on the blank items and spells before the mount

		- applies to both auction pages AND chat page
			* either way (except for newspaper mode), item filters (except for name) means they have to pull all item data.  it is what it is.

		- on filter changed (debounced), pull whole new set of lines
		- on scroll down / reconnect, use current filter in query
			* see https://docs.microsoft.com/en-us/aspnet/core/signalr/javascript-client?view=aspnetcore-2.2
		- on new hub lines, only save them if they match the filter; otherwise discard them completely
